{"version":3,"sources":["Components/modal-confirm/index.js","Components/board-list-items/board-avt.jpg","Components/board-list-items/index.js","Components/modal-new-board/index.js","Views/Homepage/index.js","Components/column/index.js","socket.js","Views/BoardDetails/index.js","Components/header/index.js","Views/Login/index.js","Views/SuccessLogin/index.js","App.js","reportWebVitals.js","index.js"],"names":["ConfirmModal","props","footer","centered","visible","isModalOpened","onCancel","className","status","title","subTitle","extra","type","onClick","danger","shape","onConfirm","confirmLabel","BoardListItem","useState","setModalOpened","created","Date","board","toDateString","name","style","width","height","hoverable","cover","alt","src","avatar","actions","ShareAltOutlined","e","stopPropagation","navigator","clipboard","writeText","process","_id","notification","success","message","duration","placement","DeleteOutlined","subtitle","NewBoardModal","icon","PlusCircleFilled","fontSize","id","size","allowClear","placeholder","onChange","onPressEnter","value","newBoardName","Content","Layout","Homepage","token","isLogin","spinning","setSpinning","boardData","setBoardData","loading","setLoading","setIsModalOpened","setNewBoardName","onCreateBoard","a","fetch","method","headers","body","JSON","stringify","result","json","msg","temp","slice","unshift","error","useEffect","document","history","push","data","fetchBoardData","gutter","align","justify","PlusCircleTwoTone","map","item","then","ok","boards","index","findIndex","splice","querySelector","Title","Typography","TextArea","Input","Column","text","setText","handleToggleInput","column","toggleInput","xs","md","lg","xl","level","color","event","target","bordered","rows","autoSize","minRows","maxRows","backgroundColor","handleAddPost","DeleteFilled","droppableId","provided","snapshot","droppableProps","ref","innerRef","isDraggingOver","draggableId","draggableProps","dragHandleProps","handleDeletePost","editable","handleUpdatePost","content","socket","socketIOClient","require","config","BoardDetails","match","params","setBoard","handleSetBoard","emit","updatedOn","getTime","postID","boardID","textArea","inputSection","tempBoard","Object","assign","newValue","handleChangeName","lastModified","handleUpdateBoard","on","fetchData","off","input","textAlign","onDragEnd","destination","sourceIndex","source","destIndex","sourceName","destName","moment","CustomHeader","Header","modalOpen","setModalOpen","visibility","Form","useForm","form","handleOpenDialog","handleGetUser","user","setFieldsValue","dob","UserOutlined","handleLogout","initialValues","remember","onFinish","values","handleUpdateUser","Item","label","rules","required","htmlType","LoginPrompt","modalLoginIsOpen","setModalLoginOpen","modalRegisterIsOpen","setModalRegisterIsOpen","handleCancel","GoogleCircleFilled","handleGoogleLogin","FacebookFilled","handleFacebookLogin","handleLogin","Password","handleRegister","SuccessLogin","console","log","setIsLogin","localStorage","setItem","setToken","fetchUserData","App","useHistory","getItem","shouldBack","setShouldBack","window","open","username","password","email","fullname","password_confirm","handleHistory","path","back","removeItem","exact","render","handleLoginState","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.c2125ee3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './index.css';\r\nimport { Modal, Layout, Result, Button } from 'antd';\r\n\r\nconst ConfirmModal = (props) =>\r\n{\r\n    return (\r\n        <Layout>\r\n            <Modal footer={[]} centered visible={props.isModalOpened} onCancel={props.onCancel}>\r\n                <Result className=\"result\" status={props.status} title={props.title} subTitle={props.subTitle} extra={[\r\n                    <Button key=\"cancel\" type=\"text\" onClick = {props.onCancel}>Cancel</Button>,\r\n                    <Button type=\"dashed\" danger shape=\"round\" key=\"console\" onClick={props.onConfirm}>{props.confirmLabel}</Button>\r\n                    ]}></Result>\r\n            </Modal>\r\n        </Layout>\r\n    );\r\n}\r\n\r\nexport default ConfirmModal;","export default __webpack_public_path__ + \"static/media/board-avt.d9d9b4dc.jpg\";","import { CopyOutlined, DeleteOutlined, ShareAltOutlined } from '@ant-design/icons';\r\nimport { Card, Layout, notification } from 'antd';\r\nimport React, { useState } from 'react';\r\nimport ConfirmModal from '../modal-confirm/index';\r\nimport avatar from './board-avt.jpg';\r\nimport './index.css';\r\n\r\nconst BoardListItem = (props) =>\r\n{\r\n    const [isModalOpened, setModalOpened] = useState(false);\r\n\r\n    const created = new Date(props.board.created).toDateString();\r\n\r\n    const onConfirm = (e) =>\r\n    {\r\n        e.stopPropagation();\r\n        props.onConfirm();\r\n        setModalOpened(false);\r\n    }\r\n\r\n    const onCancel = (e) =>\r\n    {\r\n        e.stopPropagation();\r\n        setModalOpened(false);\r\n    }\r\n\r\n    const onDelete = (e) =>\r\n    {\r\n        e.stopPropagation();\r\n        setModalOpened(true);\r\n    }\r\n\r\n    const onShare = (e) =>\r\n    {\r\n        e.stopPropagation();\r\n        navigator.clipboard.writeText(process.env.REACT_APP_URL + process.env.PUBLIC_URL + \"/#\" + \"/boards/\" + props.board._id);\r\n\r\n        notification.success({\r\n            message: \"Board URL copied to clipboard!\",\r\n            duration: 1.5,\r\n            placement: \"bottomLeft\",\r\n          });\r\n    }\r\n\r\n    return (\r\n        <Layout>\r\n            <Card title={props.board.name} className=\"card\" style={{ width: 280, height: 290 }} hoverable=\"true\" extra={created}\r\n                cover={\r\n                    <img alt=\"avatar\" src={avatar}/>\r\n                }\r\n                actions={[\r\n                <ShareAltOutlined key= \"share\" onClick = {onShare} />,\r\n                <DeleteOutlined key=\"delete\" onClick={onDelete}/>\r\n                ]} >\r\n            </Card>\r\n\r\n            <ConfirmModal isModalOpened = {isModalOpened} status=\"error\" title=\"Delete this board?\" subtitle=\"This cannot be undone!\" confirmLabel = \"Delete\" onConfirm ={onConfirm} onCancel = {onCancel}></ConfirmModal>\r\n        </Layout>\r\n       \r\n\r\n    );\r\n}\r\n\r\nexport default BoardListItem;","import React from 'react';\r\nimport './index.css';\r\nimport { Modal, Layout, Input, Button, Result } from 'antd';\r\nimport { PlusCircleFilled } from '@ant-design/icons';\r\n\r\nconst NewBoardModal = (props) =>\r\n{   \r\n\r\n    return (\r\n        <Layout>\r\n            <Modal footer={[]} centered visible={props.isModalOpened} onCancel={props.onCancel}>\r\n                <Result title=\"New board\" className=\"result\" status={props.status} icon={<PlusCircleFilled style={{fontSize: 60}}></PlusCircleFilled>} extra={[\r\n                    <Input id=\"newBoardName\" size=\"large\" allowClear=\"true\" placeholder=\"New board name\" onChange={props.onChange} onPressEnter={props.onConfirm} value={props.newBoardName} />,\r\n                    <Button id=\"addNewBoardButton\" type=\"primary\" shape=\"round\" onClick = {props.onConfirm}>Create</Button>\r\n                ]}>\r\n                  \r\n                </Result>\r\n            </Modal>\r\n        </Layout>\r\n    );\r\n}\r\n\r\nexport default NewBoardModal;","  import { PlusCircleTwoTone } from '@ant-design/icons';\r\nimport { Button, Card, Col, Layout, notification, Row, Spin } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport BoardListItem from '../../Components/board-list-items/index';\r\nimport NewBoardModal from '../../Components/modal-new-board/index';\r\nimport './index.css';\r\nconst { Content } = Layout;\r\n\r\n\r\n\r\nfunction Homepage(props)\r\n{\r\n  const token = props.token;\r\n  const [isLogin, setIsLogin] = useState(props.isLogin);\r\n  const [spinning, setSpinning] = useState(false);\r\n  const [boardData, setBoardData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [isModalOpened, setIsModalOpened] = useState(false);\r\n  const [newBoardName, setNewBoardName] = useState(\"\");\r\n\r\n  const onCreateBoard = async () =>\r\n  {\r\n    if (!newBoardName)\r\n    {\r\n      setIsModalOpened(false);\r\n      return;\r\n    }\r\n\r\n    setSpinning(true);\r\n    setIsModalOpened(false);\r\n    setNewBoardName(\"\");\r\n\r\n    const result = await fetch(process.env.REACT_APP_HOST + '/boards/add', {\r\n      method: 'POST',\r\n     \r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'JWT ' + token,\r\n      },\r\n      body: JSON.stringify({\r\n        name: newBoardName,\r\n        created: new Date(),\r\n      })\r\n    });\r\n\r\n    const msg = await result.json();\r\n\r\n    if (result.status === 200)\r\n    {\r\n        let temp = boardData.slice();\r\n        temp.unshift(msg);\r\n        setBoardData(temp);\r\n        notification.success({\r\n          message: \"Board creation successful!\",\r\n          duration: 1.5,\r\n          placement: \"bottomLeft\"\r\n        })\r\n    } else\r\n    {\r\n      notification.error({\r\n        message: msg.message,\r\n        duration: 1.5,\r\n        placement: \"bottomLeft\"\r\n      })\r\n    }\r\n  \r\n    setSpinning(false);\r\n  }\r\n\r\n  const onCancel = () =>\r\n  {\r\n    setIsModalOpened(false);\r\n    setNewBoardName(\"\");\r\n  }\r\n\r\n  const onChange = () =>\r\n  {\r\n    const value = document.querySelector(\"#newBoardName\").value;\r\n    setNewBoardName(value);\r\n  }\r\n\r\n  const handleDeleteBoard = (id) =>\r\n  {\r\n\r\n    setSpinning(true);\r\n\r\n    fetch(process.env.REACT_APP_HOST + '/boards/delete', {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'JWT ' + token, \r\n      },\r\n      body: JSON.stringify({\r\n        _id: id\r\n      })\r\n    }).then(result => result.json()).then(data =>\r\n    {\r\n      if (data.ok)\r\n      {\r\n        //Update state\r\n        let boards = boardData.slice();\r\n        const index = boardData.findIndex(item => item._id === id);\r\n    \r\n        if (index >= 0)\r\n        {\r\n          boards.splice(index, 1)\r\n          setBoardData(boards);\r\n        }\r\n    \r\n        notification.success({\r\n          message: \"Board successfully deleted!\",\r\n          duration: 1.5,\r\n          placement: \"bottomLeft\",\r\n        });\r\n      } else\r\n      {\r\n        notification.error({\r\n          message: \"Board deletion failed!\",\r\n          duration: 1.5,\r\n          placement: \"bottomLeft\",\r\n        });\r\n      }\r\n    })\r\n    setSpinning(false);\r\n   \r\n  }\r\n \r\n  useEffect(() =>\r\n  {\r\n\r\n    document.title=\"Dashboard\";\r\n\r\n    if(!token)\r\n    {\r\n      props.history.push('/user');\r\n    }\r\n    const fetchBoardData = async () =>\r\n    {\r\n      const result = (await fetch(process.env.REACT_APP_HOST + '/boards', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': 'JWT ' + token\r\n        }\r\n      }));\r\n\r\n      const msg = await result.json();\r\n\r\n      if (result.status !== 400)\r\n      {\r\n        setBoardData(msg.data);\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchBoardData();\r\n\r\n  }, []);\r\n\r\n  return (\r\n    <Layout className=\"layoutH\">\r\n      <Content className=\"bodyH\">\r\n\r\n        <Spin size=\"large\" spinning={spinning} className=\"spin\">\r\n          <Row gutter={[16, 16]} align=\"middle\" justify=\"center\">\r\n            <Col className=\"gutter-row\" >   \r\n              <Button type=\"dashed\" id=\"addBoardBtn\" shape=\"round \" onClick = {() => setIsModalOpened(true)}>\r\n                <PlusCircleTwoTone style={{ fontSize: 30 }} key=\"newBoard\"></PlusCircleTwoTone>\r\n              </Button>\r\n            </Col>\r\n\r\n            {boardData.map(item =>\r\n              <Col className=\"gutter-row\" onClick={() => { props.history.push('/boards/' + item._id) }}>\r\n                <BoardListItem key={item._id} board={item} onConfirm={() =>  handleDeleteBoard(item._id)}></BoardListItem>\r\n              </Col>\r\n            )}\r\n\r\n            <Col className=\"gutter-row\">   \r\n              <Card style={{ width: 300 }} className={loading? \"\": \"hidden\"} loading={loading}></Card>\r\n            </Col>\r\n            <Col className=\"gutter-row\">   \r\n              <Card style={{ width: 300 }} className={loading? \"\": \"hidden\"} loading={loading}></Card>\r\n            </Col>\r\n            <Col className=\"gutter-row\">   \r\n              <Card style={{ width: 300 }} className={loading? \"\": \"hidden\"} loading={loading}></Card>\r\n            </Col>\r\n            <Col className=\"gutter-row\">   \r\n              <Card style={{ width: 300 }} className={loading? \"\": \"hidden\"} loading={loading}></Card>\r\n            </Col>\r\n            <Col className=\"gutter-row\">   \r\n              <Card style={{ width: 300 }} className={loading? \"\": \"hidden\"} loading={loading}></Card>\r\n            </Col>\r\n        </Row>\r\n      </Spin>\r\n        \r\n      \r\n          <NewBoardModal isModalOpened = {isModalOpened} onCancel= {onCancel} onConfirm = {onCreateBoard} onChange={onChange} newBoardName={newBoardName}></NewBoardModal>\r\n      </Content>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","import { DeleteFilled, PlusCircleFilled } from '@ant-design/icons';\r\nimport { Button, Card, Col, Input, Row, Typography } from 'antd';\r\nimport React, { useState } from 'react';\r\nimport {Droppable, Draggable} from 'react-beautiful-dnd';\r\nimport './index.css';\r\nconst { Title } = Typography;\r\nconst { TextArea } = Input; \r\n\r\nconst Column = (props) =>\r\n{\r\n    const [text, setText] = useState(\"\");\r\n\r\n    const handleChange = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const handleToggleInput = (column, status)  => {\r\n        props.toggleInput(column, status);\r\n        setText(\"\");\r\n    }\r\n\r\n    return (<Col xs={24} md={24} lg={8} xl={8} className=\"col\">\r\n                <Title level={3}> {props.name} </Title>\r\n                \r\n                <PlusCircleFilled className=\"addIcons\" style={{ color: props.color }} onClick={() => handleToggleInput(props.title, \"\")} />\r\n                \r\n                <div id={props.title + \"Input\"} className=\"hidden\">\r\n                    <TextArea className=\"textarea\" value={text} onChange = {handleChange} id={props.title + \"Text\"} bordered=\"false\" rows={3} autoSize={{ minRows: 3, maxRows: 5 }}></TextArea>\r\n                    <Row gutter={[24]} justify=\"center\">\r\n                        <Col className=\"gutter-row\">\r\n                            <Button type=\"dashed\" shape=\"round\" style={{backgroundColor: 'transparent'}} onClick={() => props.handleAddPost(props.title)} icon={<PlusCircleFilled style={{ color: props.color }} />}>Add</Button>\r\n                        </Col>\r\n                        <Col className=\"gutter-row\">\r\n                            <Button type=\"text\" icon={<DeleteFilled style={{color: '#e91e63'}}/>} onClick = {() => { handleToggleInput(props.title, \"hidden\")}}>Cancel</Button>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n\r\n                <Card style={{ width: 300 }} className={props.loading? \"\": \"hidden\"} loading={props.loading}></Card>\r\n        \r\n                {props.board[props.title] ? (\r\n                    <Droppable droppableId = {props.title}>\r\n                    {\r\n                        (provided, snapshot) => \r\n                        <div {...provided.droppableProps} ref={provided.innerRef} className = {(snapshot.isDraggingOver ? \"highlight\" : '')} isDraggingOver={snapshot.isDraggingOver} >\r\n                                {\r\n                                    props.board[props.title].map((item, index) => (\r\n                                        <Draggable key={item._id} draggableId = {item._id} index={index}  >\r\n                                            {\r\n                                                (provided) => (\r\n                                                    <div ref = {provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\r\n                                                        <Card hoverable className=\"card\" actions={[<DeleteFilled key=\"delete\" onClick={() => props.handleDeletePost( item._id, props.title)} />]} >\r\n                                                            <Title editable={{ onChange: (value) => { props.handleUpdatePost(item._id, value, props.title) }}} level={5}>{item.content}</Title>\r\n                                                        </Card>\r\n                                                    </div>\r\n                                                   \r\n                                                )\r\n                                            }\r\n                                        </Draggable>))\r\n                                }\r\n                                {provided.placeholder}\r\n                        </div>\r\n                            \r\n                    }\r\n                    \r\n                    \r\n                </Droppable>\r\n                ) : <div></div>}\r\n                \r\n                    \r\n                    \r\n            </Col>)\r\n}\r\n\r\nexport default Column;","import socketIOClient from 'socket.io-client';\r\n\r\nconst socket = socketIOClient(process.env.REACT_APP_HOST);\r\n\r\nexport default socket;","import { Layout, notification, Row, Typography, Spin } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { DragDropContext } from 'react-beautiful-dnd';\r\nimport Column from '../../Components/column/index';\r\nimport socket from '../../socket';\r\n\r\nimport './index.css';\r\nconst { Content } = Layout;\r\nconst { Title } = Typography;\r\n\r\nrequire('dotenv').config();\r\n\r\nfunction BoardDetails(props)\r\n{\r\n    const _id = props.match.params.id;\r\n    const [board, setBoard] = useState({});\r\n    const [loading, setLoading] = useState(false);\r\n    const [spinning, setSpinning] = useState(false);\r\n    const token = props.token;\r\n\r\n    const handleSetBoard = (board) => {\r\n        if(!board)\r\n        {\r\n            return;\r\n        }\r\n        socket.emit('boardChanged', {...board, updatedOn: new Date().getTime()});\r\n        setBoard(board);\r\n    };\r\n\r\n    const handleUpdatePost = async (postID, value, target) => {\r\n\r\n        setSpinning(true);\r\n\r\n        const result = await fetch(process.env.REACT_APP_HOST + '/posts/update', {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'JWT ' + token\r\n            },\r\n            body: JSON.stringify({\r\n                _id: postID,\r\n                boardID : _id,\r\n                target: target,\r\n                content: value,\r\n            })\r\n        });\r\n\r\n        const msg = await result.json();\r\n\r\n        if(result.status ===200)\r\n        {\r\n            notification.success({\r\n                message: \"Post updated\",\r\n                duration: 1.5,\r\n                placement: \"bottomLeft\",\r\n            });\r\n\r\n            handleSetBoard(msg);\r\n        }\r\n        else\r\n        {\r\n            notification.error({\r\n                message: \"Post update failed\",\r\n                duration: 1.5,\r\n                placement: \"bottomLeft\",\r\n            });\r\n        }\r\n\r\n        setSpinning(false);\r\n\r\n    }\r\n\r\n    const handleDeletePost = async (postID, target) =>\r\n    {\r\n        setSpinning(true);\r\n\r\n        const result = await fetch(process.env.REACT_APP_HOST + '/posts/delete', {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'JWT ' + token\r\n            },\r\n            body: JSON.stringify({\r\n                _id: postID,\r\n                boardID : _id,\r\n                target: target,\r\n            })\r\n        });\r\n\r\n        const msg = await result.json();\r\n\r\n        if(result.status === 200)\r\n        {\r\n            notification.success({\r\n                message: \"Post deleted\",\r\n                duration: 1.5,\r\n                placement: \"bottomLeft\",\r\n            });\r\n\r\n            handleSetBoard(msg)\r\n\r\n        }\r\n        else\r\n        {\r\n            notification.error({\r\n                message: \"Post deletion failed\",\r\n                duration: 1.5,\r\n                placement: \"bottomLeft\",\r\n            });\r\n        }\r\n\r\n        setSpinning(false);\r\n    }\r\n\r\n    const handleAddPost = async (target) =>\r\n    {\r\n        setSpinning(true);\r\n\r\n        let textArea = document.querySelector('#' + target + 'Text');\r\n        let inputSection = document.querySelector('#' + target + 'Input');\r\n        const value = textArea.value;\r\n\r\n        textArea.value = \"\";\r\n        inputSection.className = \"hidden\";\r\n\r\n        if(!value)\r\n        {\r\n            return;\r\n        }\r\n        \r\n        const result = await fetch(process.env.REACT_APP_HOST + '/posts/add', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'JWT ' + token\r\n            },\r\n            body: JSON.stringify({\r\n                content: value,\r\n                created: new Date(),\r\n                boardID: _id,\r\n                target: target,\r\n            })\r\n        });\r\n\r\n        const msg = await result.json();\r\n\r\n        if(result.status === 200 || result.status === 304)\r\n        {\r\n            notification.success({\r\n                message: \"Post added successfully\",\r\n                duration: 1.5,\r\n                placement: \"bottomLeft\",\r\n            });\r\n\r\n            let tempBoard = {};\r\n\r\n            if (board)\r\n            {\r\n                tempBoard = Object.assign(tempBoard, board);  \r\n            }\r\n\r\n\r\n            const newValue = {\r\n                _id: msg._id,\r\n                content: msg.content,\r\n            }\r\n\r\n            tempBoard[target].unshift(newValue);\r\n\r\n            handleSetBoard(tempBoard);\r\n        }\r\n        else\r\n        {\r\n            notification.error({\r\n                message: \"Adding post failed\",\r\n                duration: 1.5,\r\n                placement: \"bottomLeft\",\r\n            });\r\n\r\n        }\r\n\r\n        setSpinning(false);\r\n    } \r\n\r\n    const handleChangeName = async (value) =>\r\n    {\r\n        setSpinning(true);\r\n\r\n        const result = await fetch(process.env.REACT_APP_HOST + '/boards/update', {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'JWT ' + token\r\n            },\r\n            body: JSON.stringify({\r\n                ...board,\r\n                name: value,\r\n                lastModified: new Date().getTime(),\r\n            })\r\n        });\r\n\r\n        const msg = await result.json();\r\n\r\n        if(result.status === 200 || result.status === 304)\r\n        {\r\n            notification.success({\r\n                message: \"Board name changed to \" + msg.name,\r\n                duration: 1.5,\r\n                placement: \"bottomLeft\",\r\n            });\r\n\r\n            document.title = msg.name;\r\n            handleSetBoard(msg);\r\n        }\r\n        else\r\n        {\r\n            notification.error({\r\n                message: \"Cannot change board name \",\r\n                duration: 1.5,\r\n                placement: \"bottomLeft\",\r\n            });\r\n        }\r\n        setSpinning(false);\r\n    }\r\n\r\n    const handleUpdateBoard = async (value) => {\r\n        setSpinning(true);\r\n\r\n        const result = await fetch(process.env.REACT_APP_HOST + '/boards/update', {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'JWT ' + token\r\n            },\r\n            body: JSON.stringify({\r\n                ...value,\r\n                lastModified: new Date().getTime(),\r\n            })\r\n        });\r\n\r\n        const msg = await result.json();\r\n\r\n        if(result.status ===200)\r\n        {\r\n            notification.success({\r\n                message: \"Board updated\",\r\n                duration: 1.5,\r\n                placement: \"bottomLeft\",\r\n            });\r\n\r\n            handleSetBoard(msg);\r\n        }\r\n        else\r\n        {\r\n            notification.error({\r\n                message: \"Board update failed\",\r\n                duration: 1.5,\r\n                placement: \"bottomLeft\",\r\n            });\r\n        }\r\n\r\n        setSpinning(false);\r\n    }\r\n\r\n    useEffect(() =>\r\n    {\r\n        \r\n        if (!token)\r\n        {\r\n            props.history.push('/user');\r\n        }\r\n    \r\n        socket.on('boardChanged', board => {\r\n\r\n            if(board._id === _id)\r\n            {\r\n                setBoard(board);\r\n            }\r\n        });\r\n\r\n        setLoading(true);\r\n\r\n        const fetchData = async () =>\r\n        {\r\n            const result = await fetch(process.env.REACT_APP_HOST + '/boards/' + _id, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization' : 'JWT ' + token\r\n                }\r\n            });\r\n\r\n            const msg = await result.json();\r\n            if (result.status === 200 || result.status ===304)\r\n            {\r\n                document.title= msg.name;\r\n\r\n                socket.emit('joinRoom', msg._id);\r\n\r\n                setBoard(msg);\r\n                setLoading(false);\r\n            }\r\n        }\r\n\r\n        fetchData();\r\n\r\n        return () => {\r\n            socket.off('boardChanged', () => {});\r\n         };\r\n\r\n    }, [])\r\n\r\n    const handleDragEnd = (result) => {\r\n\r\n        if (!result.destination) return;\r\n\r\n        const sourceIndex = result.source.index;\r\n        const destIndex = result.destination.index;\r\n        const sourceName = result.source.droppableId;\r\n        const destName = result.destination.droppableId;\r\n\r\n        if(sourceName===destName && sourceIndex === destIndex)\r\n        {\r\n            return;\r\n        }\r\n\r\n        let tempBoard = {};\r\n        Object.assign(tempBoard, board);\r\n\r\n        const [item] = tempBoard[sourceName].splice(sourceIndex, 1);\r\n\r\n        tempBoard[destName].splice(destIndex, 0, item);\r\n\r\n        handleUpdateBoard(tempBoard);\r\n        \r\n    }\r\n\r\n    const toggleInput = (column, status) =>\r\n    {\r\n        let input = document.querySelector(\"#\" + column + \"Input\");\r\n        let text = document.querySelector(\"#\" + column + \"Text\");\r\n\r\n        text.value = \"\";\r\n        input.className = status;\r\n    }\r\n\r\n    return (\r\n        <Layout className=\"layout\">\r\n            <Spin className=\"spin\" size=\"large\" spinning={spinning}>\r\n                <Content className=\"body\">\r\n                    <Title editable={{onChange: handleChangeName}} level={2}>{board.name}</Title>\r\n                    \r\n                    <Row gutter={[16, 16]} className=\"row\" justify=\"center\" align=\"top\" style={{textAlign: 'center'}}>\r\n                        <DragDropContext onDragEnd = {handleDragEnd}>\r\n                            <Column loading={loading} name=\"Went Well\" title=\"wentWell\" color=\"#009688\" toggleInput={toggleInput} handleAddPost={handleAddPost} board={board} handleDeletePost={handleDeletePost} handleUpdatePost={handleUpdatePost}/>\r\n                            <Column loading={loading} name=\"To Improve\" title=\"toImprove\" color=\"#e91e63\" toggleInput={toggleInput} handleAddPost={handleAddPost} board={board} handleDeletePost={handleDeletePost} handleUpdatePost={handleUpdatePost}/>\r\n                            <Column loading={loading} name=\"Actions\" title=\"actions\" color=\"#9c27b0\" toggleInput={toggleInput} handleAddPost={handleAddPost} board={board} handleDeletePost={handleDeletePost} handleUpdatePost={handleUpdatePost}/>\r\n                        </DragDropContext>\r\n                    </Row>\r\n                </Content>\r\n            </Spin>\r\n            \r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport default BoardDetails;\r\n","import { Button, Layout, Modal, Form, PageHeader, Spin, Input, DatePicker } from 'antd';\r\nimport { UserOutlined, SmileFilled } from '@ant-design/icons';\r\nimport React, {useState} from 'react';\r\nimport './index.css';\r\nconst moment = require('moment');\r\n\r\nconst { Header } = Layout;\r\n\r\nconst CustomHeader = (props) =>\r\n{\r\n    const [modalOpen, setModalOpen] = useState(false);\r\n    const [spinning, setSpinning] = useState(false);\r\n    const isLogin = props.visibility;\r\n    \r\n    const [form] = Form.useForm();\r\n\r\n    const handleOpenDialog = async () =>\r\n    {\r\n        setSpinning(true);\r\n        setModalOpen(true);\r\n        const user = await props.handleGetUser();\r\n\r\n        form.setFieldsValue({\r\n            ...user,\r\n            dob: moment(user.dob),\r\n        });\r\n\r\n        setSpinning(false);\r\n        \r\n    }\r\n    \r\n    const handleCancel = () =>\r\n    {\r\n        setModalOpen(false);\r\n    }\r\n\r\n    const handleUpdateUser = (values) =>\r\n    {\r\n        setSpinning(true);\r\n        props.handleUpdateUser(values);\r\n        setModalOpen(false);\r\n        setSpinning(false);\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <PageHeader title=\"Retrospective\" className={isLogin ? \"header\" : \"hidden\"} extra={[\r\n                <Button type=\"primary\" shape=\"round\" onClick={() => handleOpenDialog()} icon={<UserOutlined key=\"user\"/>}>Account </Button>,\r\n                <Button type=\"dashed\" shape=\"round\" onClick={props.handleLogout}>Logout </Button>]}>\r\n            </PageHeader>\r\n\r\n            <Spin className=\"spin\" spinning={spinning} size=\"default\" >\r\n                <Modal centered visible={modalOpen} footer={[]} onCancel={handleCancel}>\r\n                <h1>Account</h1>\r\n                    <Form form={form} className=\"form\" name=\"login\" initialValues={{ remember: false, }} onFinish={(values) => handleUpdateUser(values)}>\r\n                        \r\n                    <Form.Item name=\"email\" label=\"Email\"\r\n                        rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your email!',\r\n                        },\r\n                        ]}\r\n                    >\r\n                        <Input className=\"input\" placeholder=\"Email\" />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item name=\"name\" label=\"Full name\"\r\n                        rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your full name!',\r\n                        },\r\n                        ]}\r\n                    >\r\n                        <Input className=\"input\" placeholder=\"Full name\" />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item name=\"dob\" label= \"Date of birth\"\r\n                        rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your dob!',\r\n                        },\r\n                        ]}\r\n                    >\r\n                        <DatePicker />\r\n                    </Form.Item>\r\n\r\n                    <Button type=\"primary\" shape='round' htmlType=\"submit\">Update</Button>\r\n\r\n                </Form>\r\n                </Modal>\r\n            </Spin>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default CustomHeader;","import React, {useState, useEffect} from 'react';\r\nimport { Result, Col, Row, Button, Modal, Form, Input, DatePicker } from 'antd';\r\nimport { FacebookFilled, GoogleCircleFilled, SmileOutlined } from '@ant-design/icons';\r\nimport './index.css'\r\n\r\nconst LoginPrompt = (props) =>\r\n{\r\n    \r\n    const [modalLoginIsOpen, setModalLoginOpen] = useState(false);\r\n    const [modalRegisterIsOpen, setModalRegisterIsOpen] = useState(false);\r\n    \r\n    useEffect(() => {\r\n        document.title=\"Account\"\r\n        if(props.token)\r\n        {\r\n            props.history.push('/dashboard');\r\n        }\r\n    }, []);\r\n    \r\n    const handleCancel = () =>\r\n    {\r\n        setModalLoginOpen(false);\r\n        setModalRegisterIsOpen(false);\r\n    }\r\n    \r\n    const handleOpenLoginDialog = () =>\r\n    {\r\n        setModalLoginOpen(true);\r\n    }\r\n    \r\n    const handleOpenRegisterDialog = () =>\r\n    {\r\n        setModalRegisterIsOpen(true);\r\n    }\r\n\r\n    \r\n\r\n    return (\r\n        <div>\r\n            <Result className=\"main\"\r\n                status=\"404\"\r\n                title=\"Retrospective Manager\"\r\n                subTitle=\"Login or register to get started!\"\r\n                extra={\r\n                    <div> \r\n                        <Row justify=\"center\" gutter={[24,24]}>\r\n                            <Col>\r\n                                <Button type=\"dashed\" shape=\"round\" onClick = {handleOpenLoginDialog}>Login</Button>\r\n                            </Col>\r\n                            <Col>\r\n                                <Button type=\"primary\" shape=\"round\" onClick = {handleOpenRegisterDialog}>Register</Button>\r\n                            </Col>\r\n                        </Row>\r\n                        <hr />\r\n                        <Row justify=\"center\" gutter={[24,24]}>\r\n                            <Col>\r\n                                <Button type=\"primary\" shape=\"round\" danger icon={<GoogleCircleFilled onClick={props.handleGoogleLogin} />} onClick={props.handleGoogleLogin}></Button>\r\n                            </Col>\r\n                            <Col>\r\n                                <Button type=\"primary\" shape=\"round\" icon={<FacebookFilled onClick={props.handleFacebookLogin} />} onClick={props.handleFacebookLogin}></Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>  \r\n                }\r\n            />\r\n            <Modal className=\"modal\" visible={modalLoginIsOpen} centered onCancel={() => handleCancel()} footer={[]}>\r\n                <h1>Login</h1>\r\n                <br />\r\n                <Form className=\"form\" name=\"login\" initialValues={{ remember: false,}} onFinish={props.handleLogin}\r\n                >\r\n                <Form.Item name=\"username\"\r\n                    rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input your username!',\r\n                    },\r\n                    ]}\r\n                >\r\n                    <Input className=\"input\" placeholder=\"Username\" />\r\n                </Form.Item>\r\n\r\n                <Form.Item name=\"password\"\r\n                    rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input your password!',\r\n                    },\r\n                    ]}\r\n                >\r\n                    <Input.Password className=\"input\" placeholder=\"Password\" />\r\n                    </Form.Item>\r\n                    \r\n                    <Button type=\"primary\" shape='round' htmlType=\"submit\">Login</Button>\r\n\r\n                </Form>\r\n            </Modal>\r\n\r\n\r\n            <Modal className=\"modal\" visible={modalRegisterIsOpen} centered onCancel={() => handleCancel()} footer={[]}>\r\n                <h1>Register</h1>\r\n                <br />\r\n                <Form className=\"form\" name=\"register\" initialValues={{ remember: false,}} onFinish={props.handleRegister}\r\n                >\r\n                    <Form.Item name=\"username\"\r\n                        rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your username!',\r\n                        },\r\n                        ]}\r\n                    >\r\n                        <Input className=\"input\" placeholder=\"Username\" />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item name=\"email\"\r\n                        rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your email!',\r\n                        },\r\n                        ]}\r\n                    >\r\n                        <Input className=\"input\" placeholder=\"Email\" />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item name=\"fullname\"\r\n                        rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your full name!',\r\n                        },\r\n                        ]}\r\n                    >\r\n                        <Input className=\"input\" placeholder=\"Full name\" />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item name=\"dob\" label= \"Date of birth\"\r\n                        rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your dob!',\r\n                        },\r\n                        ]}\r\n                    >\r\n                        <DatePicker />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item name=\"password\"\r\n                        rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your password!',\r\n                        },\r\n                        ]}\r\n                    >\r\n                    <Input.Password className=\"input\" placeholder=\"Password\" />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item name=\"password_confirm\"\r\n                        rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your confirm password!',\r\n                        },\r\n                        ]}\r\n                    >\r\n                    <Input.Password className=\"input\" placeholder=\"Confirm password\" />\r\n                    </Form.Item>\r\n                    \r\n                    <Button type=\"primary\" shape='round' htmlType=\"submit\">Register</Button>\r\n\r\n                </Form>\r\n            </Modal>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default LoginPrompt;","import React, {useEffect} from 'react';\r\nimport './index.css'\r\n\r\nconst SuccessLogin = (props) => {\r\n    useEffect(() => {\r\n        const fetchUserData = async () => {\r\n            const result = await fetch(process.env.REACT_APP_HOST + \"/auth/success\", {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                  },\r\n            });\r\n\r\n            const msg = await result.json();\r\n\r\n            if(result.status===200 || result.status===304)\r\n            {\r\n                console.log(msg);\r\n                props.setIsLogin(true);\r\n                localStorage.setItem('token', msg.token);\r\n                props.setToken(msg.token);\r\n                props.history.push('/dashboard');\r\n            }\r\n\r\n            else{\r\n                props.history.push('/');\r\n            }\r\n        }\r\n\r\n        fetchUserData();\r\n    }, []);\r\n\r\n    return (\r\n        <div></div>\r\n    )\r\n}\r\n\r\nexport default SuccessLogin;","import React, {useState, useEffect} from 'react';\r\nimport Homepage from './Views/Homepage/index';\r\nimport BoardDetails from './Views/BoardDetails/index';\r\nimport './App.css';\r\nimport { useHistory } from 'react-router-dom';\r\nimport CustomHeader from './Components/header/index';\r\nimport { notification } from 'antd';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Redirect,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport LoginPrompt from './Views/Login/index';\r\nimport SuccessLogin from './Views/SuccessLogin/index';\r\n\r\nfunction App()\r\n{\r\n  const history = useHistory();\r\n\r\n  const [token, setToken] = useState(localStorage.getItem('token'));\r\n  const [shouldBack, setShouldBack] = useState(false);\r\n  const [isLogin, setIsLogin] = useState(false);\r\n\r\n  const [modalLoginIsOpen, setModalLoginOpen] = useState(false);\r\n  const [modalRegisterIsOpen, setModalRegisterIsOpen] = useState(false);\r\n\r\n  useEffect(() =>\r\n  {\r\n    if (token)\r\n    {\r\n      setIsLogin(true);  \r\n    }\r\n  }, []);\r\n    \r\n\r\n  const handleGoogleLogin = async () => {\r\n    window.open(process.env.REACT_APP_HOST + `/auth/google`, \"_self\");\r\n  }\r\n\r\n  const handleFacebookLogin = async () => {\r\n    window.open(process.env.REACT_APP_HOST + `/auth/facebook`, \"_self\");\r\n  }\r\n\r\n  const handleHistory = (path) =>\r\n  {\r\n\r\n    history.push(path);\r\n    if (path.size > 1)\r\n    {\r\n      setShouldBack(true);  \r\n    }\r\n  };\r\n\r\n  const handleLogin =  async (values) =>\r\n  {\r\n\r\n    const result = await fetch(process.env.REACT_APP_HOST + \"/login\", {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        username: values.username,\r\n        password: values.password\r\n      })\r\n    }\r\n    );\r\n\r\n    const msg = await result.json();\r\n\r\n    if (result.status !== 200)\r\n    {\r\n      notification.error({\r\n        message: msg.message,\r\n        duration: 1.5,\r\n        placement: \"bottomLeft\"\r\n      });\r\n    }\r\n    else\r\n    {\r\n      localStorage.setItem('token', msg.token);\r\n      setToken(msg.token);\r\n      setIsLogin(true);\r\n      setModalLoginOpen(false);\r\n      history.push('/dashboard');\r\n    }\r\n  }\r\n\r\n  const handleLogout  = () =>\r\n  {\r\n    localStorage.removeItem('token');\r\n    setToken(\"\");\r\n    history.push('/user');\r\n    setIsLogin(false);\r\n  }\r\n\r\n  const handleRegister = async (values) =>\r\n  {\r\n    const result = await fetch(process.env.REACT_APP_HOST + \"/register\", {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n          username: values.username,\r\n          email: values.email,\r\n          name: values.fullname,\r\n          dob: values.dob,\r\n          password: values.password,\r\n          password_confirm: values.password_confirm\r\n        })\r\n      }\r\n    )\r\n\r\n    const msg = await result.json();\r\n\r\n    if (result.status === 400)\r\n    {\r\n      notification.error({\r\n        message: msg.message,\r\n        duration: 1.5,\r\n        placement: \"bottomLeft\"\r\n      });\r\n    }\r\n    else \r\n    {\r\n      notification.success({\r\n        message: msg.message,\r\n        duration: 1.5,\r\n        placement: \"bottomLeft\"\r\n      });\r\n      setModalRegisterIsOpen(false);\r\n    }\r\n  }\r\n\r\n  const handleGetUser = async () =>\r\n  {\r\n    const result = await fetch(process.env.REACT_APP_HOST + \"/user\", {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization' : 'JWT ' + token,\r\n      }\r\n    }\r\n    );\r\n\r\n    const msg = await result.json();\r\n\r\n    if (result.status !== 200)\r\n    {\r\n      notification.error({\r\n        message: msg.message,\r\n        duration: 1.5,\r\n        placement: \"bottomLeft\"\r\n      });\r\n      return {};\r\n    }\r\n    else\r\n    {\r\n      return msg;\r\n    }\r\n  }\r\n\r\n  const handleUpdateUser = async (values) =>\r\n  {\r\n    \r\n    const result = await fetch(process.env.REACT_APP_HOST + '/update', {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'JWT ' + token\r\n        },\r\n        body: JSON.stringify({\r\n            ...values,\r\n        })\r\n    });\r\n\r\n    const msg = await result.json();\r\n\r\n    if(result.status ===200)\r\n    {\r\n        notification.success({\r\n            message: \"Account info updated\",\r\n            duration: 1.5,\r\n            placement: \"bottomLeft\",\r\n        });\r\n\r\n        console.log(msg);\r\n    }\r\n    else\r\n    {\r\n        notification.error({\r\n            message: \"Account info update failed\",\r\n            duration: 1.5,\r\n            placement: \"bottomLeft\",\r\n        });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n        <CustomHeader handleUpdateUser={handleUpdateUser} handleGetUser= {handleGetUser} history = {history} handleHistory = {handleHistory} back={shouldBack} handleLogout = {handleLogout} visibility={isLogin} />\r\n      <Switch>\r\n        <Route exact path=\"/dashboard\" render={props => <Homepage token = {token} {...props} />} >\r\n          \r\n        </Route>\r\n        <Route path=\"/boards/:id\" render={(props) => <BoardDetails token = {token} {...props} />} >\r\n        \r\n        </Route>\r\n        <Route exact path=\"/user\" render={(props) => <LoginPrompt token = {token} {...props} handleFacebookLogin = {handleFacebookLogin} handleGoogleLogin = {handleGoogleLogin} isLogin={isLogin} handleLoginState={setIsLogin} handleLogin={handleLogin} handleRegister={handleRegister}/>}>\r\n      \r\n        </Route>\r\n          <Route path=\"/auth/success\" render={(props) => <SuccessLogin {...props} setToken = {setToken} setIsLogin ={setIsLogin} />} > \r\n        </Route>\r\n        <Route exact path=\"/\">\r\n          <Redirect to=\"/dashboard\" />\r\n        </Route>\r\n       \r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { HashRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <App />\r\n  </HashRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}