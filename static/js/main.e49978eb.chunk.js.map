{"version":3,"sources":["Components/modal-confirm/index.js","Components/board-list-items/board-avt.jpg","Components/board-list-items/index.js","Components/modal-new-board/index.js","Views/Homepage/index.js","Components/column/index.js","Views/BoardDetails/index.js","Components/header/index.js","Views/Login/index.js","App.js","reportWebVitals.js","index.js"],"names":["ConfirmModal","props","footer","centered","visible","isModalOpened","onCancel","className","status","title","subTitle","extra","type","onClick","danger","shape","onConfirm","confirmLabel","BoardListItem","useState","setModalOpened","created","Date","board","toDateString","name","style","width","height","hoverable","cover","alt","src","avatar","actions","ShareAltOutlined","CopyOutlined","DeleteOutlined","e","stopPropagation","subtitle","NewBoardModal","icon","PlusCircleFilled","fontSize","id","size","allowClear","placeholder","onChange","onPressEnter","value","newBoardName","Content","Layout","Homepage","token","localStorage","getItem","isLogin","useHistory","boardData","setBoardData","loading","setLoading","setIsModalOpened","setNewBoardName","onCreateBoard","a","fetch","process","method","headers","body","JSON","stringify","result","json","msg","temp","slice","unshift","notification","success","message","duration","placement","error","useEffect","history","push","data","fetchBoardData","gutter","align","justify","PlusCircleTwoTone","map","item","_id","then","ok","boards","index","findIndex","splice","document","querySelector","Title","Typography","TextArea","Text","Paragraph","Input","Column","span","level","color","toggleInput","bordered","rows","autoSize","minRows","maxRows","backgroundColor","handleAddPost","DeleteFilled","handleDeletePost","editable","handleUpdatePost","content","Header","Footer","Card","require","config","BoardDetails","setBoard","match","params","postID","target","boardID","console","log","textArea","inputSection","tempBoard","Object","assign","newValue","handleChangeName","fetchData","column","input","textAlign","CustomHeader","visibility","loginAndSignUp","theme","mode","handleLogout","LoginPrompt","modalLoginIsOpen","setModalLoginOpen","modalRegisterIsOpen","setModalRegisterIsOpen","handleCancel","initialValues","remember","onFinish","handleLogin","Item","rules","required","Password","htmlType","handleRegister","label","App","shouldBack","setShouldBack","setIsLogin","values","username","password","setItem","email","fullname","dob","password_confirm","handleHistory","path","back","removeItem","render","Login","handleLoginState","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"+eAkBeA,EAdM,SAACC,GAElB,OACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAOC,OAAQ,GAAIC,UAAQ,EAACC,QAASH,EAAMI,cAAeC,SAAUL,EAAMK,SAA1E,SACI,cAAC,IAAD,CAAQC,UAAU,SAASC,OAAQP,EAAMO,OAAQC,MAAOR,EAAMQ,MAAOC,SAAUT,EAAMS,SAAUC,MAAO,CAClG,cAAC,IAAD,CAAqBC,KAAK,OAAOC,QAAWZ,EAAMK,SAAlD,mBAAY,UACZ,cAAC,IAAD,CAAQM,KAAK,SAASE,QAAM,EAACC,MAAM,QAAsBF,QAASZ,EAAMe,UAAxE,SAAoFf,EAAMgB,cAA3C,mBCXpD,MAA0B,sCCqD1BC,EA7CO,SAACjB,GACtB,IAAD,EAC4CkB,oBAAS,GADrD,mBACWd,EADX,KAC0Be,EAD1B,KAGUC,EAAU,IAAIC,KAAKrB,EAAMsB,MAAMF,SAASG,eAqB9C,OACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAMf,MAAOR,EAAMsB,MAAME,KAAMlB,UAAU,OAAOmB,MAAO,CAAEC,MAAO,IAAKC,OAAQ,KAAOC,UAAU,OAAOlB,MAAOU,EACxGS,MACI,qBAAKC,IAAI,SAASC,IAAKC,IAE3BC,QAAS,CACT,cAACC,EAAA,EAAD,GAAuB,SACvB,cAACC,EAAA,EAAD,GAAoB,SAChB,cAACC,EAAA,EAAD,CAA6BxB,QAf5B,SAACyB,GAEdA,EAAEC,kBACFnB,GAAe,KAYiB,aAI5B,cAAC,EAAD,CAAcf,cAAiBA,EAAeG,OAAO,QAAQC,MAAM,qBAAqB+B,SAAS,yBAAyBvB,aAAe,SAASD,UAhCxI,SAACsB,GAEfA,EAAEC,kBACFtC,EAAMe,YACNI,GAAe,IA4B8Jd,SAzBhK,SAACgC,GAEdA,EAAEC,kBACFnB,GAAe,U,2BCFRqB,EAjBO,SAACxC,GAGnB,OACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAOC,OAAQ,GAAIC,UAAQ,EAACC,QAASH,EAAMI,cAAeC,SAAUL,EAAMK,SAA1E,SACI,cAAC,IAAD,CAAQG,MAAM,YAAYF,UAAU,SAASC,OAAQP,EAAMO,OAAQkC,KAAM,cAACC,EAAA,EAAD,CAAkBjB,MAAO,CAACkB,SAAU,MAA0BjC,MAAO,CAC1I,cAAC,IAAD,CAAOkC,GAAG,eAAeC,KAAK,QAAQC,WAAW,OAAOC,YAAY,iBAAiBC,SAAUhD,EAAMgD,SAAUC,aAAcjD,EAAMe,UAAWmC,MAAOlD,EAAMmD,eAC3J,cAAC,IAAD,CAAQP,GAAG,oBAAoBjC,KAAK,UAAUG,MAAM,QAAQF,QAAWZ,EAAMe,UAA7E,4BCNZqC,G,OAAYC,IAAZD,SA2LOE,MAvLf,SAAkBtD,GAEhB,IAAMuD,EAAQC,aAAaC,QAAQ,SADrC,EAEgCvC,mBAASlB,EAAM0D,SAF/C,mBAESA,EAFT,aAGkBC,cACkBzC,mBAAS,KAJ7C,mBAIS0C,EAJT,KAIoBC,EAJpB,OAKgC3C,oBAAS,GALzC,mBAKS4C,EALT,KAKkBC,EALlB,OAM4C7C,oBAAS,GANrD,mBAMSd,EANT,KAMwB4D,EANxB,OAO0C9C,mBAAS,IAPnD,mBAOSiC,EAPT,KAOuBc,EAPvB,KASQC,EAAa,uCAAG,gCAAAC,EAAA,yDAEfhB,EAFe,uBAIlBa,GAAiB,GAJC,0CASCI,MAAMC,gEAA4C,CACrEC,OAAQ,OAERC,QAAS,CACP,eAAgB,mBAChB,cAAiB,OAAShB,GAE5BiB,KAAMC,KAAKC,UAAU,CACnBlD,KAAM2B,EACN/B,QAAS,IAAIC,SAlBG,cASdsD,EATc,gBAsBFA,EAAOC,OAtBL,OAsBdC,EAtBc,OAwBE,MAAlBF,EAAOpE,SAEHuE,EAAOlB,EAAUmB,SAChBC,QAAQH,GACbhB,EAAaiB,GACbG,IAAaC,QAAQ,CACnBC,QAAS,6BACTC,SAAU,IACVC,UAAW,gBAIfJ,IAAaK,MAAM,CACjBH,QAASN,EAAIM,QACbC,SAAU,IACVC,UAAW,eAKfrB,GAAiB,GACjBC,EAAgB,IA7CI,4CAAH,qDAoInB,OA7BAsB,qBAAU,WAGJhC,GAEFvD,EAAMwF,QAAQC,KAAK,SAED,uCAAG,8BAAAtB,EAAA,sEAECC,MAAMC,4DAAwC,CAClEC,OAAQ,MACRC,QAAS,CACP,cAAiB,OAAShB,KALT,cAEfoB,EAFe,gBASHA,EAAOC,OATJ,OASfC,EATe,OAWC,MAAlBF,EAAOpE,QAETsD,EAAagB,EAAIa,MAEnB3B,GAAW,GAfU,2CAAH,oDAkBpB4B,KAEC,CAACjC,IAGF,cAAC,IAAD,CAAQpD,UAAU,SAAlB,SACE,eAAC8C,EAAD,CAAS9C,UAAU,OAAnB,UACA,eAAC,IAAD,CAAKsF,OAAQ,CAAC,GAAI,IAAKC,MAAM,SAASC,QAAQ,SAA9C,UAEA,cAAC,IAAD,CAAKxF,UAAU,aAAf,SACI,cAAC,IAAD,CAAQK,KAAK,SAASiC,GAAG,cAAc9B,MAAM,SAASF,QAAW,kBAAMoD,GAAiB,IAAxF,SACE,cAAC+B,EAAA,EAAD,CAAmBtE,MAAO,CAAEkB,SAAU,KAAU,gBAInDiB,EAAUoC,KAAI,SAAAC,GAAI,OACjB,cAAC,IAAD,CAAK3F,UAAU,aAAaM,QAAS,WAAQZ,EAAMwF,QAAQC,KAAK,WAAaQ,EAAKC,MAAlF,SACE,cAAC,EAAD,CAA8B5E,MAAO2E,EAAMlF,UAAW,kBArFrC6B,EAqF8DqD,EAAKC,SAnF5F9B,MAAMC,mEAA+C,CACnDC,OAAQ,SACRC,QAAS,CACP,eAAgB,mBAChB,cAAiB,OAAShB,GAE5BiB,KAAMC,KAAKC,UAAU,CACnBwB,IAAKtD,MAENuD,MAAK,SAAAxB,GAAM,OAAIA,EAAOC,UAAQuB,MAAK,SAAAT,GAEpC,GAAIA,EAAKU,GACT,CAEE,IAAIC,EAASzC,EAAUmB,QACjBuB,EAAQ1C,EAAU2C,WAAU,SAAAN,GAAI,OAAIA,EAAKC,MAAQtD,KAEnD0D,GAAS,IAEXD,EAAOG,OAAOF,EAAO,GACrBzC,EAAawC,IAGfpB,IAAaC,QAAQ,CACnBC,QAAS,8BACTC,SAAU,IACVC,UAAW,oBAIbJ,IAAaK,MAAM,CACjBH,QAAS,yBACTC,SAAU,IACVC,UAAW,kBAnCO,IAACzC,IAqFGqD,EAAKC,UAK7B,cAAC,IAAD,CAAK5F,UAAU,aAAf,SACE,cAAC,IAAD,CAAMmB,MAAO,CAAEC,MAAO,KAAOpB,UAAWwD,EAAS,GAAI,SAAUA,QAASA,MAE1E,cAAC,IAAD,CAAKxD,UAAU,aAAf,SACE,cAAC,IAAD,CAAMmB,MAAO,CAAEC,MAAO,KAAOpB,UAAWwD,EAAS,GAAI,SAAUA,QAASA,MAE1E,cAAC,IAAD,CAAKxD,UAAU,aAAf,SACE,cAAC,IAAD,CAAMmB,MAAO,CAAEC,MAAO,KAAOpB,UAAWwD,EAAS,GAAI,SAAUA,QAASA,MAE1E,cAAC,IAAD,CAAKxD,UAAU,aAAf,SACE,cAAC,IAAD,CAAMmB,MAAO,CAAEC,MAAO,KAAOpB,UAAWwD,EAAS,GAAI,SAAUA,QAASA,MAE1E,cAAC,IAAD,CAAKxD,UAAU,aAAf,SACE,cAAC,IAAD,CAAMmB,MAAO,CAAEC,MAAO,KAAOpB,UAAWwD,EAAS,GAAI,SAAUA,QAASA,SAIxE,cAAC,EAAD,CAAe1D,cAAiBA,EAAeC,SAvHtC,WAEf2D,GAAiB,GACjBC,EAAgB,KAoH0DlD,UAAamD,EAAelB,SAjHvF,WAEf,IAAME,EAAQuD,SAASC,cAAc,iBAAiBxD,MACtDe,EAAgBf,IA8G0GC,aAAcA,U,2BCzLpIwD,EAA2BC,IAA3BD,MACAE,GAD2BD,IAApBE,KAAoBF,IAAdG,UACAC,IAAbH,UA8BOI,EA5BA,SAACjH,GAEZ,OAAQ,eAAC,IAAD,CAAKkH,KAAM,EAAG5G,UAAU,MAAxB,UACI,eAACqG,EAAD,CAAOQ,MAAO,EAAd,cAAmBnH,EAAMwB,KAAzB,OACI,cAACkB,EAAA,EAAD,CAAkBpC,UAAU,WAAWmB,MAAO,CAAE2F,MAAOpH,EAAMoH,OAASxG,QAAS,kBAAKZ,EAAMqH,YAAYrH,EAAMQ,MAAO,OAC/G,sBAAKoC,GAAI5C,EAAMQ,MAAQ,QAASF,UAAU,SAA1C,UACA,cAACuG,EAAD,CAAUvG,UAAU,WAAWsC,GAAI5C,EAAMQ,MAAQ,OAAQ8G,SAAS,QAAQC,KAAM,EAAGC,SAAU,CAAEC,QAAS,EAAGC,QAAS,KACpH,eAAC,IAAD,CAAK9B,OAAQ,CAAC,IAAKE,QAAQ,SAA3B,UACI,cAAC,IAAD,CAAKxF,UAAU,aAAf,SACI,cAAC,IAAD,CAAQK,KAAK,SAASG,MAAM,QAAQW,MAAO,CAACkG,gBAAiB,eAAgB/G,QAAS,kBAAMZ,EAAM4H,cAAc5H,EAAMQ,QAAQiC,KAAM,cAACC,EAAA,EAAD,CAAkBjB,MAAO,CAAE2F,MAAOpH,EAAMoH,SAA5K,mBAEJ,cAAC,IAAD,CAAK9G,UAAU,aAAf,SACI,cAAC,IAAD,CAAQK,KAAK,OAAO8B,KAAM,cAACoF,EAAA,EAAD,CAAcpG,MAAO,CAAC2F,MAAO,aAAexG,QAAW,WAAQZ,EAAMqH,YAAYrH,EAAMQ,MAAO,WAAxH,4BAKXR,EAAMsB,MAAMtB,EAAMQ,OAASR,EAAMsB,MAAMtB,EAAMQ,OAAOwF,KAAI,SAAAC,GAAI,OAEzD,cAAC,IAAD,CAAMrE,WAAS,EAACtB,UAAU,OAAsB2B,QAAS,CAAC,cAAC4F,EAAA,EAAD,CAA2BjH,QAAS,kBAAMZ,EAAM8H,iBAAkB7B,EAAKC,IAAKlG,EAAMQ,SAAhE,WAA5E,SACI,cAACmG,EAAD,CAAOoB,SAAU,CAAE/E,SAAU,SAACE,GAAYlD,EAAMgI,iBAAiB/B,EAAKC,IAAKhD,EAAOlD,EAAMQ,SAAW2G,MAAO,EAA1G,SAA8GlB,EAAKgC,WADjFhC,EAAKC,QAI5C,OCvBC9C,G,OAAYC,IAA5B6E,OAA4B7E,IAApB8E,OAAoB9E,IAAZD,SAChBuD,EAA2BC,IAA3BD,MAA2BC,IAApBE,KAAoBF,IAAdG,UACAC,IAAbH,SACOuB,IAEfC,EAAQ,KAAUC,SAsPHC,MApPf,SAAsBvI,GACrB,IAAD,EAC8BkB,mBAAS,IADvC,mBACWI,EADX,KACkBkH,EADlB,OAEkCtH,oBAAS,GAF3C,mBAGUgF,GAHV,UAGgBlG,EAAMyI,MAAMC,OAAO9F,IACzBW,EAAQC,aAAaC,QAAQ,SAE7BuE,EAAgB,uCAAG,WAAOW,EAAQzF,EAAO0F,GAAtB,iBAAAzE,EAAA,sEAEAC,MAAMC,kEAA8C,CACrEC,OAAQ,MACRC,QAAS,CACL,eAAgB,mBAChB,cAAiB,OAAShB,GAE9BiB,KAAMC,KAAKC,UAAU,CACjBwB,IAAKyC,EACLE,QAAU3C,EACV0C,OAAQA,EACRX,QAAS/E,MAZI,cAEfyB,EAFe,gBAgBHA,EAAOC,OAhBJ,OAgBfC,EAhBe,OAkBD,MAAjBF,EAAOpE,QAEN0E,IAAaC,QAAQ,CACjBC,QAAS,eACTC,SAAU,IACVC,UAAW,eAGfyD,QAAQC,IAAIlE,GAEZ2D,EAAS3D,IAITI,IAAaK,MAAM,CACfH,QAAS,qBACTC,SAAU,IACVC,UAAW,eAnCE,2CAAH,0DAyChByC,EAAgB,uCAAG,WAAOa,EAAQC,GAAf,iBAAAzE,EAAA,sEAEAC,MAAMC,kEAA8C,CACrEC,OAAQ,SACRC,QAAS,CACL,eAAgB,mBAChB,cAAiB,OAAShB,GAE9BiB,KAAMC,KAAKC,UAAU,CACjBwB,IAAKyC,EACLE,QAAU3C,EACV0C,OAAQA,MAXK,cAEfjE,EAFe,gBAeHA,EAAOC,OAfJ,OAefC,EAfe,OAiBA,MAAlBF,EAAOpE,QAEN0E,IAAaC,QAAQ,CACjBC,QAAS,eACTC,SAAU,IACVC,UAAW,eAGfmD,EAAS3D,IAKTI,IAAaK,MAAM,CACfH,QAAS,uBACTC,SAAU,IACVC,UAAW,eAjCE,2CAAH,wDAsChBuC,EAAa,uCAAG,WAAOgB,GAAP,2BAAAzE,EAAA,yDAGd6E,EAAWvC,SAASC,cAAc,IAAMkC,EAAS,QACjDK,EAAexC,SAASC,cAAc,IAAMkC,EAAS,SACnD1F,EAAQ8F,EAAS9F,MAEvB8F,EAAS9F,MAAQ,GACjB+F,EAAa3I,UAAY,SAErB4C,EAVc,iEAeGkB,MAAMC,+DAA2C,CAClEC,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChB,cAAiB,OAAShB,GAE9BiB,KAAMC,KAAKC,UAAU,CACjBuD,QAAS/E,EACT9B,QAAS,IAAIC,KACbwH,QAAS3C,EACT0C,OAAQA,MAzBE,cAeZjE,EAfY,iBA6BAA,EAAOC,OA7BP,QA6BZC,EA7BY,OA+BG,MAAlBF,EAAOpE,QAAoC,MAAlBoE,EAAOpE,QAE/B0E,IAAaC,QAAQ,CACjBC,QAAS,0BACTC,SAAU,IACVC,UAAW,eAGX6D,EAAY,GAEZ5H,IAEA4H,EAAYC,OAAOC,OAAOF,EAAW5H,IAInC+H,EAAW,CACbnD,IAAKrB,EAAIqB,IACT+B,QAASpD,EAAIoD,SAGjBiB,EAAUN,GAAQ5D,QAAQqE,GAE1Bb,EAASU,IAITjE,IAAaK,MAAM,CACfH,QAAS,qBACTC,SAAU,IACVC,UAAW,eA7DD,4CAAH,sDAmEbiE,EAAgB,uCAAG,WAAOpG,GAAP,iBAAAiB,EAAA,sEAEAC,MAAMC,mEAA+C,CACtEC,OAAQ,MACRC,QAAS,CACL,eAAgB,mBAChB,cAAiB,OAAShB,GAE9BiB,KAAMC,KAAKC,UAAU,CACjBwB,IAAKA,EACL1E,KAAM0B,MAVO,cAEfyB,EAFe,gBAcHA,EAAOC,OAdJ,OAcfC,EAde,OAgBA,MAAlBF,EAAOpE,QAAoC,MAAlBoE,EAAOpE,QAE/B0E,IAAaC,QAAQ,CACjBC,QAAS,yBAA2BN,EAAIrD,KACxC4D,SAAU,IACVC,UAAW,eAGfmD,EAAS3D,IAITI,IAAaK,MAAM,CACfH,QAAS,4BACTC,SAAU,IACVC,UAAW,eA/BE,2CAAH,sDAoCtBE,qBAAU,WAEDhC,GAEDvD,EAAMwF,QAAQC,KAAK,SAGR,uCAAG,8BAAAtB,EAAA,sEAEOC,MAAMC,6DAA0C6B,EAAK,CACtE5B,OAAQ,MACRC,QAAS,CACL,eAAgB,mBAChB,cAAkB,OAAShB,KANrB,cAERoB,EAFQ,gBAUIA,EAAOC,OAVX,OAURC,EAVQ,OAWQ,MAAlBF,EAAOpE,QAAmC,MAAjBoE,EAAOpE,QAEhCiI,EAAS3D,GAbC,2CAAH,oDAiBf0E,KACD,IAGH,IAAMlC,EAAc,SAACmC,EAAQjJ,GAEzB,IAAIkJ,EAAQhD,SAASC,cAAc,IAAM8C,EAAS,SACvC/C,SAASC,cAAc,IAAM8C,EAAS,QAE5CtG,MAAQ,GACbuG,EAAMnJ,UAAYC,GAGtB,OACI,cAAC,IAAD,CAAQD,UAAY,SAApB,SACI,eAAC,EAAD,CAASA,UAAU,OAAnB,UACI,cAAC,EAAD,CAAOyH,SAAU,CAAC/E,SAAUsG,GAAmBnC,MAAO,EAAtD,SAA0D7F,EAAME,OAChE,cAAC,IAAD,UACI,eAAC,IAAD,CAAKoE,OAAQ,CAAC,GAAI,IAAKE,QAAQ,SAASD,MAAM,MAAMpE,MAAO,CAACiI,UAAW,UAAvE,UAEI,cAAC,EAAD,CAAQlI,KAAK,YAAYhB,MAAM,WAAW4G,MAAM,UAAUC,YAAaA,EAAaO,cAAeA,EAAetG,MAAOA,EAAOwG,iBAAkBA,EAAkBE,iBAAkBA,IACtL,cAAC,EAAD,CAAQxG,KAAK,aAAahB,MAAM,YAAY4G,MAAM,UAAUC,YAAaA,EAAaO,cAAeA,EAAetG,MAAOA,EAAOwG,iBAAkBA,EAAkBE,iBAAkBA,IACxL,cAAC,EAAD,CAAQxG,KAAK,UAAUhB,MAAM,UAAU4G,MAAM,UAAUC,YAAaA,EAAaO,cAAeA,EAAetG,MAAOA,EAAOwG,iBAAkBA,EAAkBE,iBAAkBA,e,kBCrPnME,G,OAAW7E,IAAX6E,QA2BOyB,EAzBM,SAAC3J,GAGlB,IAAM0D,EAAU1D,EAAM4J,WAClBC,EAAiB,GASrB,OAPInG,IAEAmG,EACK,cAAC,IAAD,CAAMC,MAAM,QAAQC,KAAK,aAAazJ,UAAU,cAAhD,SACG,cAAC,IAAD,CAAQK,KAAK,UAAUG,MAAM,QAAQF,QAAWZ,EAAMgK,aAAtD,wBAIR,8BACI,eAAC,EAAD,CAAQ1J,UAAYoD,EAAS,SAAW,SAAxC,UACI,qBAAKpD,UAAU,SACduJ,Q,kBCoIFI,EAvJK,SAACjK,GACpB,IAAD,EAEkDkB,oBAAS,GAF3D,mBAEWgJ,EAFX,KAE6BC,EAF7B,OAG0DjJ,oBAAS,GAHnE,mBAGWkJ,EAHX,KAGgCC,EAHhC,KAMUC,EAAe,WAEjBH,GAAkB,GAClBE,GAAuB,IAa3B,OACI,gCACI,cAAC,IAAD,CACI9J,OAAO,MACPC,MAAM,yCACNE,MACI,eAAC,IAAD,CAAKoF,QAAQ,SAASF,OAAQ,CAAC,GAAG,IAAlC,UACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAQjF,KAAK,SAASG,MAAM,QAAQF,QAlB9B,WAE1BuJ,GAAkB,IAgBE,qBAEJ,cAAC,IAAD,UACI,cAAC,IAAD,CAAQxJ,KAAK,UAAUG,MAAM,QAAQF,QAhB5B,WAE7ByJ,GAAuB,IAcH,6BAKhB,eAAC,IAAD,CAAO/J,UAAU,QAAQH,QAAS+J,EAAkBhK,UAAQ,EAACG,SAAU,kBAAMiK,KAAgBrK,OAAQ,GAArG,UACI,uCACA,uBACA,eAAC,IAAD,CAAMK,UAAU,OAAOkB,KAAK,QAAQ+I,cAAe,CAAEC,UAAU,GAASC,SAAUzK,EAAM0K,YAAxF,UAEA,cAAC,IAAKC,KAAN,CAAWnJ,KAAK,WACZoJ,MAAO,CACP,CACIC,UAAU,EACV1F,QAAS,gCAJjB,SAQI,cAAC,IAAD,CAAO7E,UAAU,QAAQyC,YAAY,eAGzC,cAAC,IAAK4H,KAAN,CAAWnJ,KAAK,WACZoJ,MAAO,CACP,CACIC,UAAU,EACV1F,QAAS,gCAJjB,SAQI,cAAC,IAAM2F,SAAP,CAAgBxK,UAAU,QAAQyC,YAAY,eAG9C,cAAC,IAAD,CAAQpC,KAAK,UAAUG,MAAM,QAAQiK,SAAS,SAA9C,yBAMR,eAAC,IAAD,CAAOzK,UAAU,QAAQH,QAASiK,EAAqBlK,UAAQ,EAACG,SAAU,kBAAMiK,KAAgBrK,OAAQ,GAAxG,UACI,0CACA,uBACA,eAAC,IAAD,CAAMK,UAAU,OAAOkB,KAAK,WAAW+I,cAAe,CAAEC,UAAU,GAASC,SAAUzK,EAAMgL,eAA3F,UAEI,cAAC,IAAKL,KAAN,CAAWnJ,KAAK,WACZoJ,MAAO,CACP,CACIC,UAAU,EACV1F,QAAS,gCAJjB,SAQI,cAAC,IAAD,CAAO7E,UAAU,QAAQyC,YAAY,eAGzC,cAAC,IAAK4H,KAAN,CAAWnJ,KAAK,QACZoJ,MAAO,CACP,CACIC,UAAU,EACV1F,QAAS,gCAJjB,SAQI,cAAC,IAAD,CAAO7E,UAAU,QAAQyC,YAAY,YAGzC,cAAC,IAAK4H,KAAN,CAAWnJ,KAAK,WACZoJ,MAAO,CACP,CACIC,UAAU,EACV1F,QAAS,gCAJjB,SAQI,cAAC,IAAD,CAAO7E,UAAU,QAAQyC,YAAY,gBAGzC,cAAC,IAAK4H,KAAN,CAAWnJ,KAAK,MAAMyJ,MAAO,gBACzBL,MAAO,CACP,CACIC,UAAU,EACV1F,QAAS,gCAJjB,SAQI,cAAC,IAAD,MAGJ,cAAC,IAAKwF,KAAN,CAAWnJ,KAAK,WACZoJ,MAAO,CACP,CACIC,UAAU,EACV1F,QAAS,gCAJjB,SAQA,cAAC,IAAM2F,SAAP,CAAgBxK,UAAU,QAAQyC,YAAY,eAG9C,cAAC,IAAK4H,KAAN,CAAWnJ,KAAK,mBACZoJ,MAAO,CACP,CACIC,UAAU,EACV1F,QAAS,wCAJjB,SAQA,cAAC,IAAM2F,SAAP,CAAgBxK,UAAU,QAAQyC,YAAY,uBAG9C,cAAC,IAAD,CAAQpC,KAAK,UAAUG,MAAM,QAAQiK,SAAS,SAA9C,gCCALG,MAnIf,WAEE,IAAM1F,EAAU7B,cACVJ,EAAQC,aAAaC,QAAQ,SAFrC,EAGsCvC,oBAAS,GAH/C,mBAGSiK,EAHT,KAGqBC,EAHrB,OAIgClK,oBAAS,GAJzC,mBAISwC,EAJT,KAIkB2H,EAJlB,OAMgDnK,oBAAS,GANzD,mBAM2BiJ,GAN3B,aAOwDjJ,oBAAS,GAPjE,mBAO8BmJ,GAP9B,WASE9E,qBAAU,WAEJhC,GAEF8H,GAAW,MAKf,IAUMX,EAAW,uCAAI,WAAOY,GAAP,iBAAAnH,EAAA,sEAGEC,MAAMC,2DAAuC,CAChEC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnB6G,SAAUD,EAAOC,SACjBC,SAAUF,EAAOE,aAVF,cAGb7G,EAHa,gBAeDA,EAAOC,OAfN,OAebC,EAfa,OAiBG,MAAlBF,EAAOpE,OAET0E,IAAaK,MAAM,CACjBH,QAASN,EAAIM,QACbC,SAAU,IACVC,UAAW,gBAKb7B,aAAaiI,QAAQ,QAAS5G,EAAItB,OAClC8H,GAAW,GACXlB,GAAkB,GAClB3E,EAAQC,KAAK,eA9BI,2CAAJ,sDAyCXuF,EAAc,uCAAG,WAAOM,GAAP,iBAAAnH,EAAA,sEAEAC,MAAMC,8DAA0C,CACnEC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACjB6G,SAAUD,EAAOC,SACjBG,MAAOJ,EAAOI,MACdlK,KAAM8J,EAAOK,SACbC,IAAKN,EAAOM,IACZJ,SAAUF,EAAOE,SACjBK,iBAAkBP,EAAOO,qBAbV,cAEflH,EAFe,gBAkBHA,EAAOC,OAlBJ,OAkBfC,EAlBe,OAoBC,MAAlBF,EAAOpE,OAET0E,IAAaK,MAAM,CACjBH,QAASN,EAAIM,QACbC,SAAU,IACVC,UAAW,gBAKbJ,IAAaC,QAAQ,CACnBC,QAASN,EAAIM,QACbC,SAAU,IACVC,UAAW,eAEbgF,GAAuB,IAnCJ,2CAAH,sDAwCpB,OACE,gCACI,cAAC,EAAD,CAAc7E,QAAWA,EAASsG,cA7FlB,SAACC,GAGrBvG,EAAQC,KAAKsG,GACTA,EAAKlJ,KAAO,GAEduI,GAAc,IAuFsDY,KAAMb,EAAYnB,aAjDpE,WAEpBxG,aAAayI,WAAW,SACxBzG,EAAQC,KAAK,SACb4F,GAAW,IA6C2GzB,WAAYlG,IAChI,eAAC,IAAD,WACE,cAAC,IAAD,CAAOqI,KAAK,aAAaG,OAAQ,SAAAlM,GAAK,OAAI,cAAC,EAAD,eAAcA,OAGxD,cAAC,IAAD,CAAO+L,KAAK,cAAcG,OAAQ,SAAClM,GAAD,OAAW,cAAC,EAAD,eAAkBA,OAG/D,cAAC,IAAD,CAAO+L,KAAK,QAAZ,SACE,cAACI,EAAD,CAAazI,QAASA,EAAS0I,iBAAkBf,EAAYX,YAAaA,EAAaM,eAAgBA,MAEzG,cAAC,IAAD,CAAOe,KAAK,IAAZ,SACE,cAAC,IAAD,CAAUM,GAAG,wBC/HRC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBrG,MAAK,YAAkD,IAA/CsG,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,QCAdO,IAASZ,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFzF,SAASsG,eAAe,SAM1BT,M","file":"static/js/main.e49978eb.chunk.js","sourcesContent":["import React from 'react';\r\nimport './index.css';\r\nimport { Modal, Layout, Result, Button } from 'antd';\r\n\r\nconst ConfirmModal = (props) =>\r\n{\r\n    return (\r\n        <Layout>\r\n            <Modal footer={[]} centered visible={props.isModalOpened} onCancel={props.onCancel}>\r\n                <Result className=\"result\" status={props.status} title={props.title} subTitle={props.subTitle} extra={[\r\n                    <Button key=\"cancel\" type=\"text\" onClick = {props.onCancel}>Cancel</Button>,\r\n                    <Button type=\"dashed\" danger shape=\"round\" key=\"console\" onClick={props.onConfirm}>{props.confirmLabel}</Button>\r\n                    ]}></Result>\r\n            </Modal>\r\n        </Layout>\r\n    );\r\n}\r\n\r\nexport default ConfirmModal;","export default __webpack_public_path__ + \"static/media/board-avt.d9d9b4dc.jpg\";","import { Card } from 'antd';\r\nimport React, {useState} from 'react';\r\nimport './index.css';\r\nimport { Typography, Modal, Layout, Result, Button } from 'antd';\r\nimport { ShareAltOutlined, CopyOutlined, DeleteOutlined } from '@ant-design/icons';\r\nimport ConfirmModal from '../modal-confirm/index';\r\nimport avatar from './board-avt.jpg';\r\n\r\nconst BoardListItem = (props) =>\r\n{\r\n    const [isModalOpened, setModalOpened] = useState(false);\r\n\r\n    const created = new Date(props.board.created).toDateString();\r\n\r\n    const onConfirm = (e) =>\r\n    {\r\n        e.stopPropagation();\r\n        props.onConfirm();\r\n        setModalOpened(false);\r\n    }\r\n\r\n    const onCancel = (e) =>\r\n    {\r\n        e.stopPropagation();\r\n        setModalOpened(false);\r\n    }\r\n\r\n    const onDelete = (e) =>\r\n    {\r\n        e.stopPropagation();\r\n        setModalOpened(true);\r\n    }\r\n\r\n    return (\r\n        <Layout>\r\n            <Card title={props.board.name} className=\"card\" style={{ width: 280, height: 290 }} hoverable=\"true\" extra={created}\r\n                cover={\r\n                    <img alt=\"avatar\" src={avatar}/>\r\n                }\r\n                actions={[\r\n                <ShareAltOutlined key= \"share\" />,\r\n                <CopyOutlined key = \"clone\" />,\r\n                    <DeleteOutlined key=\"delete\" onClick={onDelete}/>\r\n                ]} >\r\n            </Card>\r\n\r\n            <ConfirmModal isModalOpened = {isModalOpened} status=\"error\" title=\"Delete this board?\" subtitle=\"This cannot be undone!\" confirmLabel = \"Delete\" onConfirm ={onConfirm} onCancel = {onCancel}></ConfirmModal>\r\n        </Layout>\r\n       \r\n\r\n    );\r\n}\r\n\r\nexport default BoardListItem;","import React from 'react';\r\nimport './index.css';\r\nimport { Modal, Layout, Input, Button, Result } from 'antd';\r\nimport { PlusCircleFilled } from '@ant-design/icons';\r\n\r\nconst NewBoardModal = (props) =>\r\n{   \r\n\r\n    return (\r\n        <Layout>\r\n            <Modal footer={[]} centered visible={props.isModalOpened} onCancel={props.onCancel}>\r\n                <Result title=\"New board\" className=\"result\" status={props.status} icon={<PlusCircleFilled style={{fontSize: 60}}></PlusCircleFilled>} extra={[\r\n                    <Input id=\"newBoardName\" size=\"large\" allowClear=\"true\" placeholder=\"New board name\" onChange={props.onChange} onPressEnter={props.onConfirm} value={props.newBoardName} />,\r\n                    <Button id=\"addNewBoardButton\" type=\"primary\" shape=\"round\" onClick = {props.onConfirm}>Create</Button>\r\n                ]}>\r\n                  \r\n                </Result>\r\n            </Modal>\r\n        </Layout>\r\n    );\r\n}\r\n\r\nexport default NewBoardModal;","  import { PlusCircleTwoTone } from '@ant-design/icons';\r\nimport { Button, Card, Col, Layout, notification, Row } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport BoardListItem from '../../Components/board-list-items/index';\r\nimport NewBoardModal from '../../Components/modal-new-board/index';\r\nimport './index.css';\r\nconst { Content } = Layout;\r\n\r\n\r\n\r\nfunction Homepage(props)\r\n{\r\n  const token = localStorage.getItem('token');\r\n  const [isLogin, setIsLogin] = useState(props.isLogin);\r\n  const history = useHistory();\r\n  const [boardData, setBoardData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [isModalOpened, setIsModalOpened] = useState(false);\r\n  const [newBoardName, setNewBoardName] = useState(\"\");\r\n\r\n  const onCreateBoard = async () =>\r\n  {\r\n    if (!newBoardName)\r\n    {\r\n      setIsModalOpened(false);\r\n      return;\r\n    }\r\n\r\n\r\n    const result = await fetch(process.env.REACT_APP_HOST + '/boards/add', {\r\n      method: 'POST',\r\n     \r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'JWT ' + token,\r\n      },\r\n      body: JSON.stringify({\r\n        name: newBoardName,\r\n        created: new Date(),\r\n      })\r\n    });\r\n\r\n    const msg = await result.json();\r\n\r\n    if (result.status === 200)\r\n    {\r\n        let temp = boardData.slice();\r\n        temp.unshift(msg);\r\n        setBoardData(temp);\r\n        notification.success({\r\n          message: \"Board creation successful!\",\r\n          duration: 1.5,\r\n          placement: \"bottomLeft\"\r\n        })\r\n    } else\r\n    {\r\n      notification.error({\r\n        message: msg.message,\r\n        duration: 1.5,\r\n        placement: \"bottomLeft\"\r\n      })\r\n    }\r\n  \r\n\r\n    setIsModalOpened(false);\r\n    setNewBoardName(\"\");\r\n  }\r\n\r\n  const onCancel = () =>\r\n  {\r\n    setIsModalOpened(false);\r\n    setNewBoardName(\"\");\r\n  }\r\n\r\n  const onChange = () =>\r\n  {\r\n    const value = document.querySelector(\"#newBoardName\").value;\r\n    setNewBoardName(value);\r\n  }\r\n\r\n  const handleDeleteBoard = (id) =>\r\n  {\r\n    fetch(process.env.REACT_APP_HOST + '/boards/delete', {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'JWT ' + token, \r\n      },\r\n      body: JSON.stringify({\r\n        _id: id\r\n      })\r\n    }).then(result => result.json()).then(data =>\r\n    {\r\n      if (data.ok)\r\n      {\r\n        //Update state\r\n        let boards = boardData.slice();\r\n        const index = boardData.findIndex(item => item._id === id);\r\n    \r\n        if (index >= 0)\r\n        {\r\n          boards.splice(index, 1)\r\n          setBoardData(boards);\r\n        }\r\n    \r\n        notification.success({\r\n          message: \"Board successfully deleted!\",\r\n          duration: 1.5,\r\n          placement: \"bottomLeft\",\r\n        });\r\n      } else\r\n      {\r\n        notification.error({\r\n          message: \"Board deletion failed!\",\r\n          duration: 1.5,\r\n          placement: \"bottomLeft\",\r\n        });\r\n      }\r\n    })\r\n\r\n   \r\n  }\r\n  \r\n  useEffect(() =>\r\n  {\r\n\r\n    if(!token)\r\n    {\r\n      props.history.push('/user');\r\n    }\r\n    const fetchBoardData = async () =>\r\n    {\r\n      const result = (await fetch(process.env.REACT_APP_HOST + '/boards', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': 'JWT ' + token\r\n        }\r\n      }));\r\n\r\n      const msg = await result.json();\r\n\r\n      if (result.status !== 400)\r\n      {\r\n        setBoardData(msg.data);\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchBoardData();\r\n\r\n  }, [isLogin]);\r\n\r\n  return (\r\n    <Layout className=\"layout\">\r\n      <Content className=\"body\">\r\n      <Row gutter={[16, 16]} align=\"middle\" justify=\"center\">\r\n\r\n      <Col className=\"gutter-row\" >   \r\n          <Button type=\"dashed\" id=\"addBoardBtn\" shape=\"round \" onClick = {() => setIsModalOpened(true)}>\r\n            <PlusCircleTwoTone style={{ fontSize: 30 }} key=\"newBoard\"></PlusCircleTwoTone>\r\n          </Button>\r\n        </Col>\r\n\r\n        {boardData.map(item =>\r\n          <Col className=\"gutter-row\" onClick={() => { props.history.push('/boards/' + item._id) }}>\r\n            <BoardListItem key={item._id} board={item} onConfirm={() =>  handleDeleteBoard(item._id)}></BoardListItem>\r\n          </Col>\r\n        )}\r\n\r\n        \r\n        <Col className=\"gutter-row\">   \r\n          <Card style={{ width: 300 }} className={loading? \"\": \"hidden\"} loading={loading}></Card>\r\n        </Col>\r\n        <Col className=\"gutter-row\">   \r\n          <Card style={{ width: 300 }} className={loading? \"\": \"hidden\"} loading={loading}></Card>\r\n        </Col>\r\n        <Col className=\"gutter-row\">   \r\n          <Card style={{ width: 300 }} className={loading? \"\": \"hidden\"} loading={loading}></Card>\r\n        </Col>\r\n        <Col className=\"gutter-row\">   \r\n          <Card style={{ width: 300 }} className={loading? \"\": \"hidden\"} loading={loading}></Card>\r\n        </Col>\r\n        <Col className=\"gutter-row\">   \r\n          <Card style={{ width: 300 }} className={loading? \"\": \"hidden\"} loading={loading}></Card>\r\n        </Col>\r\n      \r\n      </Row>\r\n          <NewBoardModal isModalOpened = {isModalOpened} onCancel= {onCancel} onConfirm = {onCreateBoard} onChange={onChange} newBoardName={newBoardName}></NewBoardModal>\r\n      </Content>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","import { DeleteFilled, PlusCircleFilled } from '@ant-design/icons';\r\nimport { Button, Card, Col, Input, Row, Typography } from 'antd';\r\nimport React from 'react';\r\nconst { Title, Text, Paragraph } = Typography;\r\nconst { TextArea } = Input; \r\n\r\nconst Column = (props) =>\r\n{\r\n    return (<Col span={7} className=\"col\">\r\n                <Title level={3}> {props.name} </Title>\r\n                    <PlusCircleFilled className=\"addIcons\" style={{ color: props.color }} onClick={() =>props.toggleInput(props.title, \"\")} />\r\n                        <div id={props.title + \"Input\"} className=\"hidden\">\r\n                        <TextArea className=\"textarea\" id={props.title + \"Text\"} bordered=\"false\" rows={3} autoSize={{ minRows: 3, maxRows: 5 }}></TextArea>\r\n                        <Row gutter={[24]} justify=\"center\">\r\n                            <Col className=\"gutter-row\">\r\n                                <Button type=\"dashed\" shape=\"round\" style={{backgroundColor: 'transparent'}} onClick={() => props.handleAddPost(props.title)} icon={<PlusCircleFilled style={{ color: props.color }} />}>Add</Button>\r\n                            </Col>\r\n                            <Col className=\"gutter-row\">\r\n                                <Button type=\"text\" icon={<DeleteFilled style={{color: '#e91e63'}}/>} onClick = {() => { props.toggleInput(props.title, \"hidden\")}}>Cancel</Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n\r\n                    {props.board[props.title] ? props.board[props.title].map(item =>\r\n                        \r\n                        <Card hoverable className=\"card\" key={item._id} actions={[<DeleteFilled key=\"delete\" onClick={() => props.handleDeletePost( item._id, props.title)} />]} >\r\n                            <Title editable={{ onChange: (value) => { props.handleUpdatePost(item._id, value, props.title) }}} level={5}>{item.content}</Title>\r\n                            </Card>\r\n                    \r\n                    ): \"\"}\r\n                    \r\n            </Col>)\r\n}\r\n\r\nexport default Column;","import { DeleteFilled, PlusCircleFilled } from '@ant-design/icons';\r\nimport { Button, Card, Col, Input, Layout, notification, Row, Typography } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { DragDropContext } from 'react-beautiful-dnd';\r\nimport Column from '../../Components/column/index';\r\nimport './index.css';\r\nconst { Header, Footer, Content } = Layout;\r\nconst { Title, Text, Paragraph } = Typography;\r\nconst { TextArea } = Input; \r\nconst Meta = { Card };\r\n\r\nrequire('dotenv').config();\r\n\r\nfunction BoardDetails(props)\r\n{\r\n    const [board, setBoard] = useState({});\r\n    const [isLogin, setIsLogin] = useState(false);\r\n    const _id = props.match.params.id;\r\n    const token = localStorage.getItem('token');\r\n\r\n    const handleUpdatePost = async (postID, value, target) => {\r\n\r\n        const result = await fetch(process.env.REACT_APP_HOST + '/posts/update', {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'JWT ' + token\r\n            },\r\n            body: JSON.stringify({\r\n                _id: postID,\r\n                boardID : _id,\r\n                target: target,\r\n                content: value,\r\n            })\r\n        });\r\n\r\n        const msg = await result.json();\r\n\r\n        if(result.status ===200)\r\n        {\r\n            notification.success({\r\n                message: \"Post updated\",\r\n                duration: 1.5,\r\n                placement: \"bottomLeft\",\r\n            });\r\n\r\n            console.log(msg);\r\n\r\n            setBoard(msg);\r\n        }\r\n        else\r\n        {\r\n            notification.error({\r\n                message: \"Post update failed\",\r\n                duration: 1.5,\r\n                placement: \"bottomLeft\",\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    const handleDeletePost = async (postID, target) =>\r\n    {\r\n        const result = await fetch(process.env.REACT_APP_HOST + '/posts/delete', {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'JWT ' + token\r\n            },\r\n            body: JSON.stringify({\r\n                _id: postID,\r\n                boardID : _id,\r\n                target: target,\r\n            })\r\n        });\r\n\r\n        const msg = await result.json();\r\n\r\n        if(result.status === 200)\r\n        {\r\n            notification.success({\r\n                message: \"Post deleted\",\r\n                duration: 1.5,\r\n                placement: \"bottomLeft\",\r\n            });\r\n\r\n            setBoard(msg)\r\n\r\n        }\r\n        else\r\n        {\r\n            notification.error({\r\n                message: \"Post deletion failed\",\r\n                duration: 1.5,\r\n                placement: \"bottomLeft\",\r\n            });\r\n        }\r\n    }\r\n\r\n    const handleAddPost = async (target) =>\r\n    {\r\n        \r\n        let textArea = document.querySelector('#' + target + 'Text');\r\n        let inputSection = document.querySelector('#' + target + 'Input');\r\n        const value = textArea.value;\r\n\r\n        textArea.value = \"\";\r\n        inputSection.className = \"hidden\";\r\n\r\n        if(!value)\r\n        {\r\n            return;\r\n        }\r\n        \r\n        const result = await fetch(process.env.REACT_APP_HOST + '/posts/add', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'JWT ' + token\r\n            },\r\n            body: JSON.stringify({\r\n                content: value,\r\n                created: new Date(),\r\n                boardID: _id,\r\n                target: target,\r\n            })\r\n        });\r\n\r\n        const msg = await result.json();\r\n\r\n        if(result.status === 200 || result.status === 304)\r\n        {\r\n            notification.success({\r\n                message: \"Post added successfully\",\r\n                duration: 1.5,\r\n                placement: \"bottomLeft\",\r\n            });\r\n\r\n            let tempBoard = {};\r\n\r\n            if (board)\r\n            {\r\n                tempBoard = Object.assign(tempBoard, board);  \r\n            }\r\n\r\n\r\n            const newValue = {\r\n                _id: msg._id,\r\n                content: msg.content,\r\n            }\r\n\r\n            tempBoard[target].unshift(newValue);\r\n\r\n            setBoard(tempBoard);\r\n        }\r\n        else\r\n        {\r\n            notification.error({\r\n                message: \"Adding post failed\",\r\n                duration: 1.5,\r\n                placement: \"bottomLeft\",\r\n            });\r\n\r\n        }\r\n    } \r\n\r\n    const handleChangeName = async (value) =>\r\n    {\r\n        const result = await fetch(process.env.REACT_APP_HOST + '/boards/update', {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'JWT ' + token\r\n            },\r\n            body: JSON.stringify({\r\n                _id: _id,\r\n                name: value,\r\n            })\r\n        });\r\n\r\n        const msg = await result.json();\r\n\r\n        if(result.status === 200 || result.status === 304)\r\n        {\r\n            notification.success({\r\n                message: \"Board name changed to \" + msg.name,\r\n                duration: 1.5,\r\n                placement: \"bottomLeft\",\r\n            });\r\n\r\n            setBoard(msg);\r\n        }\r\n        else\r\n        {\r\n            notification.error({\r\n                message: \"Cannot change board name \",\r\n                duration: 1.5,\r\n                placement: \"bottomLeft\",\r\n            });\r\n        }\r\n    }\r\n\r\n    useEffect(() =>\r\n    {\r\n        if (!token)\r\n        {\r\n            props.history.push('/user');\r\n        }\r\n\r\n        const fetchData = async () =>\r\n        {\r\n            const result = await fetch(process.env.REACT_APP_HOST + '/boards/' + _id, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization' : 'JWT ' + token\r\n                }\r\n            });\r\n\r\n            const msg = await result.json();\r\n            if (result.status === 200 || result.status ===304)\r\n            {\r\n                setBoard(msg);\r\n            }\r\n        }\r\n\r\n        fetchData();\r\n    }, [])\r\n\r\n\r\n    const toggleInput = (column, status) =>\r\n    {\r\n        let input = document.querySelector(\"#\" + column + \"Input\");\r\n        let text = document.querySelector(\"#\" + column + \"Text\");\r\n\r\n        text.value = \"\";\r\n        input.className = status;\r\n    }\r\n\r\n    return (\r\n        <Layout className = \"layout\">\r\n            <Content className=\"body\">\r\n                <Title editable={{onChange: handleChangeName}} level={2}>{board.name}</Title>\r\n                <DragDropContext>\r\n                    <Row gutter={[16, 16]} justify=\"center\" align=\"top\" style={{textAlign: 'center'}}>\r\n                        \r\n                        <Column name=\"Went Well\" title=\"wentWell\" color=\"#009688\" toggleInput={toggleInput} handleAddPost={handleAddPost} board={board} handleDeletePost={handleDeletePost} handleUpdatePost={handleUpdatePost}/>\r\n                        <Column name=\"To Improve\" title=\"toImprove\" color=\"#e91e63\" toggleInput={toggleInput} handleAddPost={handleAddPost} board={board} handleDeletePost={handleDeletePost} handleUpdatePost={handleUpdatePost}/>\r\n                        <Column name=\"Actions\" title=\"actions\" color=\"#9c27b0\" toggleInput={toggleInput} handleAddPost={handleAddPost} board={board} handleDeletePost={handleDeletePost} handleUpdatePost={handleUpdatePost}/>\r\n\r\n                    </Row>\r\n                </DragDropContext>\r\n            </Content>\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport default BoardDetails;\r\n","import { Layout, Menu, Button, Modal, Form, Input } from 'antd';\r\nimport './index.css';\r\nimport React, {useState} from 'react';\r\nconst { Header } = Layout;\r\n\r\nconst CustomHeader = (props) =>\r\n{\r\n    \r\n    const isLogin = props.visibility;\r\n    let loginAndSignUp = \"\";\r\n\r\n    if (isLogin)\r\n    {\r\n        loginAndSignUp =\r\n            (<Menu theme=\"light\" mode=\"horizontal\" className=\"header-menu\">\r\n                <Button type=\"primary\" shape=\"round\" onClick = {props.handleLogout}>Logout </Button>\r\n            </Menu>)\r\n    }\r\n    return (\r\n        <div>\r\n            <Header className= {isLogin? \"header\" : \"hidden\"}>\r\n                <div className=\"logo\" />\r\n                {loginAndSignUp}\r\n            </Header>\r\n            \r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default CustomHeader;","import React, {useState} from 'react';\r\nimport { Result, Col, Row, Button, Modal, Form, Input, DatePicker } from 'antd';\r\n\r\nconst LoginPrompt = (props) =>\r\n{\r\n    \r\n    const [modalLoginIsOpen, setModalLoginOpen] = useState(false);\r\n    const [modalRegisterIsOpen, setModalRegisterIsOpen] = useState(false);\r\n    \r\n    \r\n    const handleCancel = () =>\r\n    {\r\n        setModalLoginOpen(false);\r\n        setModalRegisterIsOpen(false);\r\n    }\r\n    \r\n    const handleOpenLoginDialog = () =>\r\n    {\r\n        setModalLoginOpen(true);\r\n    }\r\n    \r\n    const handleOpenRegisterDialog = () =>\r\n    {\r\n        setModalRegisterIsOpen(true);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Result\r\n                status=\"403\"\r\n                title=\"Login or register to view your boards!\"\r\n                extra={\r\n                    <Row justify=\"center\" gutter={[24,24]}>\r\n                        <Col>\r\n                            <Button type=\"dashed\" shape=\"round\" onClick = {handleOpenLoginDialog}>Login</Button>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button type=\"primary\" shape=\"round\" onClick = {handleOpenRegisterDialog}>Register</Button>\r\n                        </Col>\r\n                    </Row>  \r\n                }\r\n            />\r\n            <Modal className=\"modal\" visible={modalLoginIsOpen} centered onCancel={() => handleCancel()} footer={[]}>\r\n                <h1>Login</h1>\r\n                <br />\r\n                <Form className=\"form\" name=\"login\" initialValues={{ remember: false,}} onFinish={props.handleLogin}\r\n                >\r\n                <Form.Item name=\"username\"\r\n                    rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input your username!',\r\n                    },\r\n                    ]}\r\n                >\r\n                    <Input className=\"input\" placeholder=\"Username\" />\r\n                </Form.Item>\r\n\r\n                <Form.Item name=\"password\"\r\n                    rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input your password!',\r\n                    },\r\n                    ]}\r\n                >\r\n                    <Input.Password className=\"input\" placeholder=\"Password\" />\r\n                    </Form.Item>\r\n                    \r\n                    <Button type=\"primary\" shape='round' htmlType=\"submit\">Login</Button>\r\n\r\n                </Form>\r\n            </Modal>\r\n\r\n\r\n            <Modal className=\"modal\" visible={modalRegisterIsOpen} centered onCancel={() => handleCancel()} footer={[]}>\r\n                <h1>Register</h1>\r\n                <br />\r\n                <Form className=\"form\" name=\"register\" initialValues={{ remember: false,}} onFinish={props.handleRegister}\r\n                >\r\n                    <Form.Item name=\"username\"\r\n                        rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your username!',\r\n                        },\r\n                        ]}\r\n                    >\r\n                        <Input className=\"input\" placeholder=\"Username\" />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item name=\"email\"\r\n                        rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your username!',\r\n                        },\r\n                        ]}\r\n                    >\r\n                        <Input className=\"input\" placeholder=\"Email\" />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item name=\"fullname\"\r\n                        rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your username!',\r\n                        },\r\n                        ]}\r\n                    >\r\n                        <Input className=\"input\" placeholder=\"Full name\" />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item name=\"dob\" label= \"Date of birth\"\r\n                        rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your username!',\r\n                        },\r\n                        ]}\r\n                    >\r\n                        <DatePicker />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item name=\"password\"\r\n                        rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your password!',\r\n                        },\r\n                        ]}\r\n                    >\r\n                    <Input.Password className=\"input\" placeholder=\"Password\" />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item name=\"password_confirm\"\r\n                        rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your confirm password!',\r\n                        },\r\n                        ]}\r\n                    >\r\n                    <Input.Password className=\"input\" placeholder=\"Confirm password\" />\r\n                    </Form.Item>\r\n                    \r\n                    <Button type=\"primary\" shape='round' htmlType=\"submit\">Register</Button>\r\n\r\n                </Form>\r\n            </Modal>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default LoginPrompt;","import React, {useState, useEffect} from 'react';\nimport Homepage from './Views/Homepage/index';\nimport BoardDetails from './Views/BoardDetails/index';\nimport './App.css';\nimport { useHistory } from 'react-router-dom';\nimport CustomHeader from './Components/header/index';\nimport { notification } from 'antd';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Redirect,\n  Route\n} from \"react-router-dom\";\nimport LoginPrompt from './Views/Login/index';\n\nfunction App()\n{\n  const history = useHistory();\n  const token = localStorage.getItem('token');\n  const [shouldBack, setShouldBack] = useState(false);\n  const [isLogin, setIsLogin] = useState(false);\n\n  const [modalLoginIsOpen, setModalLoginOpen] = useState(false);\n  const [modalRegisterIsOpen, setModalRegisterIsOpen] = useState(false);\n\n  useEffect(() =>\n  {\n    if (token)\n    {\n      setIsLogin(true);  \n    }\n  })\n    \n\n  const handleHistory = (path) =>\n  {\n\n    history.push(path);\n    if (path.size > 1)\n    {\n      setShouldBack(true);  \n    }\n  };\n\n  const handleLogin =  async (values) =>\n  {\n\n    const result = await fetch(process.env.REACT_APP_HOST + \"/login\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        username: values.username,\n        password: values.password\n      })\n    }\n    );\n\n    const msg = await result.json();\n\n    if (result.status !== 200)\n    {\n      notification.error({\n        message: msg.message,\n        duration: 1.5,\n        placement: \"bottomLeft\"\n      });\n    }\n    else\n    {\n      localStorage.setItem('token', msg.token);\n      setIsLogin(true);\n      setModalLoginOpen(false);\n      history.push('/dashboard');\n    }\n  }\n\n  const handleLogout  = () =>\n  {\n    localStorage.removeItem('token');\n    history.push('/user');\n    setIsLogin(false);\n  }\n\n  const handleRegister = async (values) =>\n  {\n    const result = await fetch(process.env.REACT_APP_HOST + \"/register\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n          username: values.username,\n          email: values.email,\n          name: values.fullname,\n          dob: values.dob,\n          password: values.password,\n          password_confirm: values.password_confirm\n        })\n      }\n    )\n\n    const msg = await result.json();\n\n    if (result.status === 400)\n    {\n      notification.error({\n        message: msg.message,\n        duration: 1.5,\n        placement: \"bottomLeft\"\n      });\n    }\n    else \n    {\n      notification.success({\n        message: msg.message,\n        duration: 1.5,\n        placement: \"bottomLeft\"\n      });\n      setModalRegisterIsOpen(false);\n    }\n    \n  }\n\n  return (\n    <div>\n        <CustomHeader history = {history} handleHistory = {handleHistory} back={shouldBack} handleLogout = {handleLogout} visibility={isLogin} />\n      <Switch>\n        <Route path=\"/dashboard\" render={props => <Homepage {...props} />} >\n          \n        </Route>\n        <Route path=\"/boards/:id\" render={(props) => <BoardDetails {...props} />} >\n        \n        </Route>\n        <Route path=\"/user\">\n          <LoginPrompt isLogin={isLogin} handleLoginState={setIsLogin} handleLogin={handleLogin} handleRegister={handleRegister}/>\n        </Route>\n        <Route path=\"/\">\n          <Redirect to=\"/dashboard\" />\n        </Route>\n      </Switch>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter, HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}