{"version":3,"sources":["Components/modal-confirm/index.js","Components/board-list-items/board-avt.jpg","Components/board-list-items/index.js","Components/modal-new-board/index.js","Views/Homepage/index.js","Components/column/index.js","Views/BoardDetails/index.js","Components/header/index.js","Views/Login/index.js","App.js","reportWebVitals.js","index.js"],"names":["ConfirmModal","props","footer","centered","visible","isModalOpened","onCancel","className","status","title","subTitle","extra","type","onClick","danger","shape","onConfirm","confirmLabel","BoardListItem","useState","setModalOpened","created","Date","board","toDateString","name","style","width","height","hoverable","cover","alt","src","avatar","actions","ShareAltOutlined","e","stopPropagation","navigator","clipboard","writeText","process","_id","notification","success","message","duration","placement","DeleteOutlined","subtitle","NewBoardModal","icon","PlusCircleFilled","fontSize","id","size","allowClear","placeholder","onChange","onPressEnter","value","newBoardName","Content","Layout","Homepage","token","localStorage","getItem","isLogin","spinning","setSpinning","boardData","setBoardData","loading","setLoading","setIsModalOpened","setNewBoardName","onCreateBoard","a","fetch","method","headers","body","JSON","stringify","result","json","msg","temp","slice","unshift","error","useEffect","history","push","data","fetchBoardData","gutter","align","justify","PlusCircleTwoTone","map","item","then","ok","boards","index","findIndex","splice","document","querySelector","Title","Typography","TextArea","Text","Paragraph","Input","Column","span","level","color","toggleInput","bordered","rows","autoSize","minRows","maxRows","backgroundColor","handleAddPost","DeleteFilled","handleDeletePost","editable","handleUpdatePost","content","require","config","BoardDetails","setBoard","match","params","postID","target","boardID","console","log","textArea","inputSection","tempBoard","Object","assign","newValue","handleChangeName","fetchData","column","input","textAlign","moment","CustomHeader","Header","modalOpen","setModalOpen","visibility","Form","useForm","form","handleOpenDialog","handleGetUser","user","setFieldsValue","dob","UserOutlined","handleLogout","initialValues","remember","onFinish","values","handleUpdateUser","Item","label","rules","required","htmlType","LoginPrompt","modalLoginIsOpen","setModalLoginOpen","modalRegisterIsOpen","setModalRegisterIsOpen","handleCancel","handleLogin","Password","handleRegister","App","useHistory","shouldBack","setShouldBack","setIsLogin","username","password","setItem","email","fullname","password_confirm","handleHistory","path","back","removeItem","render","handleLoginState","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.640d4f7f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './index.css';\r\nimport { Modal, Layout, Result, Button } from 'antd';\r\n\r\nconst ConfirmModal = (props) =>\r\n{\r\n    return (\r\n        <Layout>\r\n            <Modal footer={[]} centered visible={props.isModalOpened} onCancel={props.onCancel}>\r\n                <Result className=\"result\" status={props.status} title={props.title} subTitle={props.subTitle} extra={[\r\n                    <Button key=\"cancel\" type=\"text\" onClick = {props.onCancel}>Cancel</Button>,\r\n                    <Button type=\"dashed\" danger shape=\"round\" key=\"console\" onClick={props.onConfirm}>{props.confirmLabel}</Button>\r\n                    ]}></Result>\r\n            </Modal>\r\n        </Layout>\r\n    );\r\n}\r\n\r\nexport default ConfirmModal;","export default __webpack_public_path__ + \"static/media/board-avt.d9d9b4dc.jpg\";","import { CopyOutlined, DeleteOutlined, ShareAltOutlined } from '@ant-design/icons';\r\nimport { Card, Layout, notification } from 'antd';\r\nimport React, { useState } from 'react';\r\nimport ConfirmModal from '../modal-confirm/index';\r\nimport avatar from './board-avt.jpg';\r\nimport './index.css';\r\n\r\nconst BoardListItem = (props) =>\r\n{\r\n    const [isModalOpened, setModalOpened] = useState(false);\r\n\r\n    const created = new Date(props.board.created).toDateString();\r\n\r\n    const onConfirm = (e) =>\r\n    {\r\n        e.stopPropagation();\r\n        props.onConfirm();\r\n        setModalOpened(false);\r\n    }\r\n\r\n    const onCancel = (e) =>\r\n    {\r\n        e.stopPropagation();\r\n        setModalOpened(false);\r\n    }\r\n\r\n    const onDelete = (e) =>\r\n    {\r\n        e.stopPropagation();\r\n        setModalOpened(true);\r\n    }\r\n\r\n    const onShare = (e) =>\r\n    {\r\n        e.stopPropagation();\r\n        navigator.clipboard.writeText(process.env.REACT_APP_URL + process.env.PUBLIC_URL + \"/#\" + \"/boards/\" + props.board._id);\r\n\r\n        notification.success({\r\n            message: \"Board URL copied to clipboard!\",\r\n            duration: 1.5,\r\n            placement: \"bottomLeft\",\r\n          });\r\n    }\r\n\r\n    return (\r\n        <Layout>\r\n            <Card title={props.board.name} className=\"card\" style={{ width: 280, height: 290 }} hoverable=\"true\" extra={created}\r\n                cover={\r\n                    <img alt=\"avatar\" src={avatar}/>\r\n                }\r\n                actions={[\r\n                <ShareAltOutlined key= \"share\" onClick = {onShare} />,\r\n                <DeleteOutlined key=\"delete\" onClick={onDelete}/>\r\n                ]} >\r\n            </Card>\r\n\r\n            <ConfirmModal isModalOpened = {isModalOpened} status=\"error\" title=\"Delete this board?\" subtitle=\"This cannot be undone!\" confirmLabel = \"Delete\" onConfirm ={onConfirm} onCancel = {onCancel}></ConfirmModal>\r\n        </Layout>\r\n       \r\n\r\n    );\r\n}\r\n\r\nexport default BoardListItem;","import React from 'react';\r\nimport './index.css';\r\nimport { Modal, Layout, Input, Button, Result } from 'antd';\r\nimport { PlusCircleFilled } from '@ant-design/icons';\r\n\r\nconst NewBoardModal = (props) =>\r\n{   \r\n\r\n    return (\r\n        <Layout>\r\n            <Modal footer={[]} centered visible={props.isModalOpened} onCancel={props.onCancel}>\r\n                <Result title=\"New board\" className=\"result\" status={props.status} icon={<PlusCircleFilled style={{fontSize: 60}}></PlusCircleFilled>} extra={[\r\n                    <Input id=\"newBoardName\" size=\"large\" allowClear=\"true\" placeholder=\"New board name\" onChange={props.onChange} onPressEnter={props.onConfirm} value={props.newBoardName} />,\r\n                    <Button id=\"addNewBoardButton\" type=\"primary\" shape=\"round\" onClick = {props.onConfirm}>Create</Button>\r\n                ]}>\r\n                  \r\n                </Result>\r\n            </Modal>\r\n        </Layout>\r\n    );\r\n}\r\n\r\nexport default NewBoardModal;","  import { PlusCircleTwoTone } from '@ant-design/icons';\r\nimport { Button, Card, Col, Layout, notification, Row, Spin } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport BoardListItem from '../../Components/board-list-items/index';\r\nimport NewBoardModal from '../../Components/modal-new-board/index';\r\nimport './index.css';\r\nconst { Content } = Layout;\r\n\r\n\r\n\r\nfunction Homepage(props)\r\n{\r\n  const token = localStorage.getItem('token');\r\n  const [isLogin, setIsLogin] = useState(props.isLogin);\r\n  const [spinning, setSpinning] = useState(false);\r\n  const [boardData, setBoardData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [isModalOpened, setIsModalOpened] = useState(false);\r\n  const [newBoardName, setNewBoardName] = useState(\"\");\r\n\r\n  const onCreateBoard = async () =>\r\n  {\r\n    if (!newBoardName)\r\n    {\r\n      setIsModalOpened(false);\r\n      return;\r\n    }\r\n\r\n    setSpinning(true);\r\n    setIsModalOpened(false);\r\n    setNewBoardName(\"\");\r\n\r\n    const result = await fetch(process.env.REACT_APP_HOST + '/boards/add', {\r\n      method: 'POST',\r\n     \r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'JWT ' + token,\r\n      },\r\n      body: JSON.stringify({\r\n        name: newBoardName,\r\n        created: new Date(),\r\n      })\r\n    });\r\n\r\n    const msg = await result.json();\r\n\r\n    if (result.status === 200)\r\n    {\r\n        let temp = boardData.slice();\r\n        temp.unshift(msg);\r\n        setBoardData(temp);\r\n        notification.success({\r\n          message: \"Board creation successful!\",\r\n          duration: 1.5,\r\n          placement: \"bottomLeft\"\r\n        })\r\n    } else\r\n    {\r\n      notification.error({\r\n        message: msg.message,\r\n        duration: 1.5,\r\n        placement: \"bottomLeft\"\r\n      })\r\n    }\r\n  \r\n    setSpinning(false);\r\n  }\r\n\r\n  const onCancel = () =>\r\n  {\r\n    setIsModalOpened(false);\r\n    setNewBoardName(\"\");\r\n  }\r\n\r\n  const onChange = () =>\r\n  {\r\n    const value = document.querySelector(\"#newBoardName\").value;\r\n    setNewBoardName(value);\r\n  }\r\n\r\n  const handleDeleteBoard = (id) =>\r\n  {\r\n\r\n    setSpinning(true);\r\n\r\n    fetch(process.env.REACT_APP_HOST + '/boards/delete', {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'JWT ' + token, \r\n      },\r\n      body: JSON.stringify({\r\n        _id: id\r\n      })\r\n    }).then(result => result.json()).then(data =>\r\n    {\r\n      if (data.ok)\r\n      {\r\n        //Update state\r\n        let boards = boardData.slice();\r\n        const index = boardData.findIndex(item => item._id === id);\r\n    \r\n        if (index >= 0)\r\n        {\r\n          boards.splice(index, 1)\r\n          setBoardData(boards);\r\n        }\r\n    \r\n        notification.success({\r\n          message: \"Board successfully deleted!\",\r\n          duration: 1.5,\r\n          placement: \"bottomLeft\",\r\n        });\r\n      } else\r\n      {\r\n        notification.error({\r\n          message: \"Board deletion failed!\",\r\n          duration: 1.5,\r\n          placement: \"bottomLeft\",\r\n        });\r\n      }\r\n    })\r\n    setSpinning(false);\r\n   \r\n  }\r\n  \r\n  useEffect(() =>\r\n  {\r\n\r\n    if(!token)\r\n    {\r\n      props.history.push('/user');\r\n    }\r\n    const fetchBoardData = async () =>\r\n    {\r\n      const result = (await fetch(process.env.REACT_APP_HOST + '/boards', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': 'JWT ' + token\r\n        }\r\n      }));\r\n\r\n      const msg = await result.json();\r\n\r\n      if (result.status !== 400)\r\n      {\r\n        setBoardData(msg.data);\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchBoardData();\r\n\r\n  }, [isLogin]);\r\n\r\n  return (\r\n    <Layout className=\"layout\">\r\n      <Content className=\"body\">\r\n\r\n        <Spin size=\"large\" spinning={spinning} className=\"spin\">\r\n          <Row gutter={[16, 16]} align=\"middle\" justify=\"center\">\r\n            <Col className=\"gutter-row\" >   \r\n              <Button type=\"dashed\" id=\"addBoardBtn\" shape=\"round \" onClick = {() => setIsModalOpened(true)}>\r\n                <PlusCircleTwoTone style={{ fontSize: 30 }} key=\"newBoard\"></PlusCircleTwoTone>\r\n              </Button>\r\n            </Col>\r\n\r\n            {boardData.map(item =>\r\n              <Col className=\"gutter-row\" onClick={() => { props.history.push('/boards/' + item._id) }}>\r\n                <BoardListItem key={item._id} board={item} onConfirm={() =>  handleDeleteBoard(item._id)}></BoardListItem>\r\n              </Col>\r\n            )}\r\n\r\n            <Col className=\"gutter-row\">   \r\n              <Card style={{ width: 300 }} className={loading? \"\": \"hidden\"} loading={loading}></Card>\r\n            </Col>\r\n            <Col className=\"gutter-row\">   \r\n              <Card style={{ width: 300 }} className={loading? \"\": \"hidden\"} loading={loading}></Card>\r\n            </Col>\r\n            <Col className=\"gutter-row\">   \r\n              <Card style={{ width: 300 }} className={loading? \"\": \"hidden\"} loading={loading}></Card>\r\n            </Col>\r\n            <Col className=\"gutter-row\">   \r\n              <Card style={{ width: 300 }} className={loading? \"\": \"hidden\"} loading={loading}></Card>\r\n            </Col>\r\n            <Col className=\"gutter-row\">   \r\n              <Card style={{ width: 300 }} className={loading? \"\": \"hidden\"} loading={loading}></Card>\r\n            </Col>\r\n        </Row>\r\n      </Spin>\r\n        \r\n      \r\n          <NewBoardModal isModalOpened = {isModalOpened} onCancel= {onCancel} onConfirm = {onCreateBoard} onChange={onChange} newBoardName={newBoardName}></NewBoardModal>\r\n      </Content>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","import { DeleteFilled, PlusCircleFilled } from '@ant-design/icons';\r\nimport { Button, Card, Col, Input, Row, Typography } from 'antd';\r\nimport React from 'react';\r\nconst { Title, Text, Paragraph } = Typography;\r\nconst { TextArea } = Input; \r\n\r\nconst Column = (props) =>\r\n{\r\n    return (<Col span={7} className=\"col\">\r\n                <Title level={3}> {props.name} </Title>\r\n                    <PlusCircleFilled className=\"addIcons\" style={{ color: props.color }} onClick={() =>props.toggleInput(props.title, \"\")} />\r\n                        <div id={props.title + \"Input\"} className=\"hidden\">\r\n                        <TextArea className=\"textarea\" id={props.title + \"Text\"} bordered=\"false\" rows={3} autoSize={{ minRows: 3, maxRows: 5 }}></TextArea>\r\n                        <Row gutter={[24]} justify=\"center\">\r\n                            <Col className=\"gutter-row\">\r\n                                <Button type=\"dashed\" shape=\"round\" style={{backgroundColor: 'transparent'}} onClick={() => props.handleAddPost(props.title)} icon={<PlusCircleFilled style={{ color: props.color }} />}>Add</Button>\r\n                            </Col>\r\n                            <Col className=\"gutter-row\">\r\n                                <Button type=\"text\" icon={<DeleteFilled style={{color: '#e91e63'}}/>} onClick = {() => { props.toggleInput(props.title, \"hidden\")}}>Cancel</Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n\r\n                    {props.board[props.title] ? props.board[props.title].map(item =>\r\n                        \r\n                        <Card hoverable className=\"card\" key={item._id} actions={[<DeleteFilled key=\"delete\" onClick={() => props.handleDeletePost( item._id, props.title)} />]} >\r\n                            <Title editable={{ onChange: (value) => { props.handleUpdatePost(item._id, value, props.title) }}} level={5}>{item.content}</Title>\r\n                            </Card>\r\n                    \r\n                    ): \"\"}\r\n                    \r\n            </Col>)\r\n}\r\n\r\nexport default Column;","import { Layout, notification, Row, Typography, Spin } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { DragDropContext } from 'react-beautiful-dnd';\r\nimport Column from '../../Components/column/index';\r\nimport './index.css';\r\nconst { Content } = Layout;\r\nconst { Title } = Typography;\r\n\r\nrequire('dotenv').config();\r\n\r\nfunction BoardDetails(props)\r\n{\r\n    const [board, setBoard] = useState({});\r\n    const [spinning, setSpinning] = useState(false);\r\n    const _id = props.match.params.id;\r\n    const token = localStorage.getItem('token');\r\n\r\n    const handleUpdatePost = async (postID, value, target) => {\r\n\r\n        setSpinning(true);\r\n\r\n        const result = await fetch(process.env.REACT_APP_HOST + '/posts/update', {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'JWT ' + token\r\n            },\r\n            body: JSON.stringify({\r\n                _id: postID,\r\n                boardID : _id,\r\n                target: target,\r\n                content: value,\r\n            })\r\n        });\r\n\r\n        const msg = await result.json();\r\n\r\n        if(result.status ===200)\r\n        {\r\n            notification.success({\r\n                message: \"Post updated\",\r\n                duration: 1.5,\r\n                placement: \"bottomLeft\",\r\n            });\r\n\r\n            console.log(msg);\r\n\r\n            setBoard(msg);\r\n        }\r\n        else\r\n        {\r\n            notification.error({\r\n                message: \"Post update failed\",\r\n                duration: 1.5,\r\n                placement: \"bottomLeft\",\r\n            });\r\n        }\r\n\r\n        setSpinning(false);\r\n\r\n    }\r\n\r\n    const handleDeletePost = async (postID, target) =>\r\n    {\r\n        setSpinning(true);\r\n\r\n        const result = await fetch(process.env.REACT_APP_HOST + '/posts/delete', {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'JWT ' + token\r\n            },\r\n            body: JSON.stringify({\r\n                _id: postID,\r\n                boardID : _id,\r\n                target: target,\r\n            })\r\n        });\r\n\r\n        const msg = await result.json();\r\n\r\n        if(result.status === 200)\r\n        {\r\n            notification.success({\r\n                message: \"Post deleted\",\r\n                duration: 1.5,\r\n                placement: \"bottomLeft\",\r\n            });\r\n\r\n            setBoard(msg)\r\n\r\n        }\r\n        else\r\n        {\r\n            notification.error({\r\n                message: \"Post deletion failed\",\r\n                duration: 1.5,\r\n                placement: \"bottomLeft\",\r\n            });\r\n        }\r\n\r\n        setSpinning(false);\r\n    }\r\n\r\n    const handleAddPost = async (target) =>\r\n    {\r\n        setSpinning(true);\r\n\r\n        let textArea = document.querySelector('#' + target + 'Text');\r\n        let inputSection = document.querySelector('#' + target + 'Input');\r\n        const value = textArea.value;\r\n\r\n        textArea.value = \"\";\r\n        inputSection.className = \"hidden\";\r\n\r\n        if(!value)\r\n        {\r\n            return;\r\n        }\r\n        \r\n        const result = await fetch(process.env.REACT_APP_HOST + '/posts/add', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'JWT ' + token\r\n            },\r\n            body: JSON.stringify({\r\n                content: value,\r\n                created: new Date(),\r\n                boardID: _id,\r\n                target: target,\r\n            })\r\n        });\r\n\r\n        const msg = await result.json();\r\n\r\n        if(result.status === 200 || result.status === 304)\r\n        {\r\n            notification.success({\r\n                message: \"Post added successfully\",\r\n                duration: 1.5,\r\n                placement: \"bottomLeft\",\r\n            });\r\n\r\n            let tempBoard = {};\r\n\r\n            if (board)\r\n            {\r\n                tempBoard = Object.assign(tempBoard, board);  \r\n            }\r\n\r\n\r\n            const newValue = {\r\n                _id: msg._id,\r\n                content: msg.content,\r\n            }\r\n\r\n            tempBoard[target].unshift(newValue);\r\n\r\n            setBoard(tempBoard);\r\n        }\r\n        else\r\n        {\r\n            notification.error({\r\n                message: \"Adding post failed\",\r\n                duration: 1.5,\r\n                placement: \"bottomLeft\",\r\n            });\r\n\r\n        }\r\n\r\n        setSpinning(false);\r\n    } \r\n\r\n    const handleChangeName = async (value) =>\r\n    {\r\n        setSpinning(true);\r\n\r\n        const result = await fetch(process.env.REACT_APP_HOST + '/boards/update', {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'JWT ' + token\r\n            },\r\n            body: JSON.stringify({\r\n                _id: _id,\r\n                name: value,\r\n            })\r\n        });\r\n\r\n        const msg = await result.json();\r\n\r\n        if(result.status === 200 || result.status === 304)\r\n        {\r\n            notification.success({\r\n                message: \"Board name changed to \" + msg.name,\r\n                duration: 1.5,\r\n                placement: \"bottomLeft\",\r\n            });\r\n\r\n            setBoard(msg);\r\n        }\r\n        else\r\n        {\r\n            notification.error({\r\n                message: \"Cannot change board name \",\r\n                duration: 1.5,\r\n                placement: \"bottomLeft\",\r\n            });\r\n        }\r\n        setSpinning(false);\r\n    }\r\n\r\n    useEffect(() =>\r\n    {\r\n        if (!token)\r\n        {\r\n            props.history.push('/user');\r\n        }\r\n\r\n        const fetchData = async () =>\r\n        {\r\n            const result = await fetch(process.env.REACT_APP_HOST + '/boards/' + _id, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization' : 'JWT ' + token\r\n                }\r\n            });\r\n\r\n            const msg = await result.json();\r\n            if (result.status === 200 || result.status ===304)\r\n            {\r\n                setBoard(msg);\r\n            }\r\n        }\r\n\r\n        fetchData();\r\n    }, [])\r\n\r\n\r\n    const toggleInput = (column, status) =>\r\n    {\r\n        let input = document.querySelector(\"#\" + column + \"Input\");\r\n        let text = document.querySelector(\"#\" + column + \"Text\");\r\n\r\n        text.value = \"\";\r\n        input.className = status;\r\n    }\r\n\r\n    return (\r\n        <Layout className=\"layout\">\r\n            <Spin className=\"spin\" size=\"large\" spinning={spinning}>\r\n                <Content className=\"body\">\r\n                    <Title editable={{onChange: handleChangeName}} level={2}>{board.name}</Title>\r\n                    <DragDropContext>\r\n                        <Row gutter={[16, 16]} className=\"row\" justify=\"center\" align=\"top\" style={{textAlign: 'center'}}>\r\n                            \r\n                            <Column name=\"Went Well\" title=\"wentWell\" color=\"#009688\" toggleInput={toggleInput} handleAddPost={handleAddPost} board={board} handleDeletePost={handleDeletePost} handleUpdatePost={handleUpdatePost}/>\r\n                            <Column name=\"To Improve\" title=\"toImprove\" color=\"#e91e63\" toggleInput={toggleInput} handleAddPost={handleAddPost} board={board} handleDeletePost={handleDeletePost} handleUpdatePost={handleUpdatePost}/>\r\n                            <Column name=\"Actions\" title=\"actions\" color=\"#9c27b0\" toggleInput={toggleInput} handleAddPost={handleAddPost} board={board} handleDeletePost={handleDeletePost} handleUpdatePost={handleUpdatePost}/>\r\n\r\n                        </Row>\r\n                    </DragDropContext>\r\n                </Content>\r\n            </Spin>\r\n            \r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport default BoardDetails;\r\n","import { Button, Layout, Modal, Form, PageHeader, Spin, Input, DatePicker } from 'antd';\r\nimport { UserOutlined } from '@ant-design/icons';\r\nimport React, {useState} from 'react';\r\nimport './index.css';\r\nconst moment = require('moment');\r\n\r\nconst { Header } = Layout;\r\n\r\nconst CustomHeader = (props) =>\r\n{\r\n    const [modalOpen, setModalOpen] = useState(false);\r\n    const [spinning, setSpinning] = useState(false);\r\n    const isLogin = props.visibility;\r\n    \r\n    const [form] = Form.useForm();\r\n\r\n    const handleOpenDialog = async () =>\r\n    {\r\n        setSpinning(true);\r\n        setModalOpen(true);\r\n        const user = await props.handleGetUser();\r\n\r\n        form.setFieldsValue({\r\n            ...user,\r\n            dob: moment(user.dob),\r\n        });\r\n\r\n        setSpinning(false);\r\n        \r\n    }\r\n    \r\n    const handleCancel = () =>\r\n    {\r\n        setModalOpen(false);\r\n    }\r\n\r\n    const handleUpdateUser = (values) =>\r\n    {\r\n        setSpinning(true);\r\n        props.handleUpdateUser(values);\r\n        setModalOpen(false);\r\n        setSpinning(false);\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <PageHeader title=\"Retrospective\" className={isLogin ? \"header\" : \"hidden\"} extra={[\r\n                <Button type=\"primary\" shape=\"round\" onClick={() => handleOpenDialog()} icon={<UserOutlined key=\"user\"/>}>Account </Button>,\r\n                <Button type=\"dashed\" shape=\"round\" onClick={props.handleLogout}>Logout </Button>]}>\r\n            </PageHeader>\r\n\r\n            <Spin className=\"spin\" spinning={spinning} size=\"default\" >\r\n                <Modal centered visible={modalOpen} footer={[]} onCancel={handleCancel}>\r\n                <h1>Account</h1>\r\n                <Form form={form} className=\"form\" name=\"login\" initialValues={{ remember: false,}} onFinish={(values) => handleUpdateUser(values)}>\r\n                    <Form.Item name=\"username\" label=\"Username\"\r\n                        rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your username!',\r\n                        },\r\n                        ]}\r\n                    >\r\n                        <Input className=\"input\" placeholder=\"Username\" />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item name=\"email\" label=\"Email\"\r\n                        rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your username!',\r\n                        },\r\n                        ]}\r\n                    >\r\n                        <Input className=\"input\" placeholder=\"Email\" />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item name=\"name\" label=\"Full name\"\r\n                        rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your username!',\r\n                        },\r\n                        ]}\r\n                    >\r\n                        <Input className=\"input\" placeholder=\"Full name\" />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item name=\"dob\" label= \"Date of birth\"\r\n                        rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your username!',\r\n                        },\r\n                        ]}\r\n                    >\r\n                        <DatePicker />\r\n                    </Form.Item>\r\n\r\n                    <Button type=\"primary\" shape='round' htmlType=\"submit\">Update</Button>\r\n\r\n                </Form>\r\n                </Modal>\r\n            </Spin>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default CustomHeader;","import React, {useState} from 'react';\r\nimport { Result, Col, Row, Button, Modal, Form, Input, DatePicker } from 'antd';\r\nimport './index.css';\r\n\r\nconst LoginPrompt = (props) =>\r\n{\r\n    \r\n    const [modalLoginIsOpen, setModalLoginOpen] = useState(false);\r\n    const [modalRegisterIsOpen, setModalRegisterIsOpen] = useState(false);\r\n    \r\n    \r\n    const handleCancel = () =>\r\n    {\r\n        setModalLoginOpen(false);\r\n        setModalRegisterIsOpen(false);\r\n    }\r\n    \r\n    const handleOpenLoginDialog = () =>\r\n    {\r\n        setModalLoginOpen(true);\r\n    }\r\n    \r\n    const handleOpenRegisterDialog = () =>\r\n    {\r\n        setModalRegisterIsOpen(true);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Result className=\"main\"\r\n                status=\"403\"\r\n                title=\"Login or register to view your boards!\"\r\n                extra={\r\n                    <Row justify=\"center\" gutter={[24,24]}>\r\n                        <Col>\r\n                            <Button type=\"dashed\" shape=\"round\" onClick = {handleOpenLoginDialog}>Login</Button>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button type=\"primary\" shape=\"round\" onClick = {handleOpenRegisterDialog}>Register</Button>\r\n                        </Col>\r\n                    </Row>  \r\n                }\r\n            />\r\n            <Modal className=\"modal\" visible={modalLoginIsOpen} centered onCancel={() => handleCancel()} footer={[]}>\r\n                <h1>Login</h1>\r\n                <br />\r\n                <Form className=\"form\" name=\"login\" initialValues={{ remember: false,}} onFinish={props.handleLogin}\r\n                >\r\n                <Form.Item name=\"username\"\r\n                    rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input your username!',\r\n                    },\r\n                    ]}\r\n                >\r\n                    <Input className=\"input\" placeholder=\"Username\" />\r\n                </Form.Item>\r\n\r\n                <Form.Item name=\"password\"\r\n                    rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input your password!',\r\n                    },\r\n                    ]}\r\n                >\r\n                    <Input.Password className=\"input\" placeholder=\"Password\" />\r\n                    </Form.Item>\r\n                    \r\n                    <Button type=\"primary\" shape='round' htmlType=\"submit\">Login</Button>\r\n\r\n                </Form>\r\n            </Modal>\r\n\r\n\r\n            <Modal className=\"modal\" visible={modalRegisterIsOpen} centered onCancel={() => handleCancel()} footer={[]}>\r\n                <h1>Register</h1>\r\n                <br />\r\n                <Form className=\"form\" name=\"register\" initialValues={{ remember: false,}} onFinish={props.handleRegister}\r\n                >\r\n                    <Form.Item name=\"username\"\r\n                        rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your username!',\r\n                        },\r\n                        ]}\r\n                    >\r\n                        <Input className=\"input\" placeholder=\"Username\" />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item name=\"email\"\r\n                        rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your username!',\r\n                        },\r\n                        ]}\r\n                    >\r\n                        <Input className=\"input\" placeholder=\"Email\" />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item name=\"fullname\"\r\n                        rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your username!',\r\n                        },\r\n                        ]}\r\n                    >\r\n                        <Input className=\"input\" placeholder=\"Full name\" />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item name=\"dob\" label= \"Date of birth\"\r\n                        rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your username!',\r\n                        },\r\n                        ]}\r\n                    >\r\n                        <DatePicker />\r\n                    </Form.Item>\r\n                    \r\n                    <Button type=\"primary\" shape='round' htmlType=\"submit\">Register</Button>\r\n\r\n                </Form>\r\n            </Modal>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default LoginPrompt;","import React, {useState, useEffect} from 'react';\nimport Homepage from './Views/Homepage/index';\nimport BoardDetails from './Views/BoardDetails/index';\nimport './App.css';\nimport { useHistory } from 'react-router-dom';\nimport CustomHeader from './Components/header/index';\nimport { notification } from 'antd';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Redirect,\n  Route\n} from \"react-router-dom\";\nimport LoginPrompt from './Views/Login/index';\n\nfunction App()\n{\n  const history = useHistory();\n  const token = localStorage.getItem('token');\n  const [shouldBack, setShouldBack] = useState(false);\n  const [isLogin, setIsLogin] = useState(false);\n\n  const [modalLoginIsOpen, setModalLoginOpen] = useState(false);\n  const [modalRegisterIsOpen, setModalRegisterIsOpen] = useState(false);\n\n  useEffect(() =>\n  {\n    if (token)\n    {\n      setIsLogin(true);  \n    }\n  })\n    \n\n  const handleHistory = (path) =>\n  {\n\n    history.push(path);\n    if (path.size > 1)\n    {\n      setShouldBack(true);  \n    }\n  };\n\n  const handleLogin =  async (values) =>\n  {\n\n    const result = await fetch(process.env.REACT_APP_HOST + \"/login\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        username: values.username,\n        password: values.password\n      })\n    }\n    );\n\n    const msg = await result.json();\n\n    if (result.status !== 200)\n    {\n      notification.error({\n        message: msg.message,\n        duration: 1.5,\n        placement: \"bottomLeft\"\n      });\n    }\n    else\n    {\n      localStorage.setItem('token', msg.token);\n      setIsLogin(true);\n      setModalLoginOpen(false);\n      history.push('/dashboard');\n    }\n  }\n\n  const handleLogout  = () =>\n  {\n    localStorage.removeItem('token');\n    history.push('/user');\n    setIsLogin(false);\n  }\n\n  const handleRegister = async (values) =>\n  {\n    const result = await fetch(process.env.REACT_APP_HOST + \"/register\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n          username: values.username,\n          email: values.email,\n          name: values.fullname,\n          dob: values.dob,\n          password: values.password,\n          password_confirm: values.password_confirm\n        })\n      }\n    )\n\n    const msg = await result.json();\n\n    if (result.status === 400)\n    {\n      notification.error({\n        message: msg.message,\n        duration: 1.5,\n        placement: \"bottomLeft\"\n      });\n    }\n    else \n    {\n      notification.success({\n        message: msg.message,\n        duration: 1.5,\n        placement: \"bottomLeft\"\n      });\n      setModalRegisterIsOpen(false);\n    }\n    \n  }\n\n  const handleGetUser = async () =>\n  {\n    const result = await fetch(process.env.REACT_APP_HOST + \"/user\", {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization' : 'JWT ' + token,\n      }\n    }\n    );\n\n    const msg = await result.json();\n\n    if (result.status !== 200)\n    {\n      notification.error({\n        message: msg.message,\n        duration: 1.5,\n        placement: \"bottomLeft\"\n      });\n      return {};\n    }\n    else\n    {\n      return msg;\n    }\n  }\n\n  const handleUpdateUser = async (values) =>\n  {\n    \n    const result = await fetch(process.env.REACT_APP_HOST + '/update', {\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'JWT ' + token\n        },\n        body: JSON.stringify({\n            ...values,\n        })\n    });\n\n    const msg = await result.json();\n\n    if(result.status ===200)\n    {\n        notification.success({\n            message: \"Account info updated\",\n            duration: 1.5,\n            placement: \"bottomLeft\",\n        });\n\n        console.log(msg);\n    }\n    else\n    {\n        notification.error({\n            message: \"Account info update failed\",\n            duration: 1.5,\n            placement: \"bottomLeft\",\n        });\n    }\n  }\n\n  return (\n    <div>\n        <CustomHeader handleUpdateUser={handleUpdateUser} handleGetUser= {handleGetUser} history = {history} handleHistory = {handleHistory} back={shouldBack} handleLogout = {handleLogout} visibility={isLogin} />\n      <Switch>\n        <Route path=\"/dashboard\" render={props => <Homepage {...props} />} >\n          \n        </Route>\n        <Route path=\"/boards/:id\" render={(props) => <BoardDetails {...props} />} >\n        \n        </Route>\n        <Route path=\"/user\">\n          <LoginPrompt isLogin={isLogin} handleLoginState={setIsLogin} handleLogin={handleLogin} handleRegister={handleRegister}/>\n        </Route>\n        <Route path=\"/\">\n          <Redirect to=\"/dashboard\" />\n        </Route>\n      </Switch>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter, HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}